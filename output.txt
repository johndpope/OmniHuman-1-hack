           INFO     Captured stdout while importing pylint_plugin:  modutils.py:191
                    [06:21:04] INFO     Starting duplicate                         
                    method/function         pylint_plugin.py:124                   
                                        analysis...                                
                               DEBUG    Files to analyze: 14                       
                    pylint_plugin.py:125                                           
                    [06:21:05] DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    load_into at line 36                                           
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def load_into(ckpt, model,                 
                    prefix, device,                                                
                                        dtype=None, remap=None):                   
                                            """Just a                              
                    debugging-friendly hack to                                     
                                        apply the weights in a                     
                    safetensors file to                                            
                                        the pytorch module."""                     
                                            for key in ckpt.keys():                
                                                model_key = key                    
                                                if remap is not                    
                    None and key in                                                
                                        remap:                                     
                                                    model_key =                    
                    remap                                                          
                                                if                                 
                    model_key.startswith(prefix) and                               
                                        not                                        
                    model_key.startswith('loss.'):                                 
                                                    path =                         
                    model_key.split('.')                                           
                                                    obj = model                    
                                                    for p in path:                 
                                                        if obj is                  
                    list:                                                          
                                                            obj =                  
                    obj                                                            
                                                        else:                      
                                                            obj =                  
                    getattr(obj, p,                                                
                                        None)                                      
                                                            if obj                 
                    is None:                                                       
                                                                pri                
                    nt(f"Skipping                                                  
                                        key '{model_key}' in                       
                    safetensors file as                                            
                                        '{p}' does not exist in                    
                    python model")                                                 
                                                                bre                
                    ak                                                             
                                                    if obj is None:                
                                                        continue                   
                                                    try:                           
                                                        tensor =                   
                                        ckpt.get_tensor(key).to(dev                
                    ice=device)                                                    
                                                        if dtype is                
                    not None and                                                   
                                        tensor.dtype !=                            
                    torch.int32:                                                   
                                                            tensor                 
                    =                                                              
                                        tensor.to(dtype=dtype)                     
                                                        obj.require                
                    s_grad_(False)                                                 
                                                        if                         
                    obj.shape !=                                                   
                                        tensor.shape:                              
                                                            print(f                
                    'W: shape                                                      
                                        mismatch for key                           
                    {model_key}, {obj.shape}                                       
                                        != {tensor.shape}')                        
                                                        obj.set_(te                
                    nsor)                                                          
                                                    except                         
                    Exception as e:                                                
                                                        print(f"Fai                
                    led to load key                                                
                                        '{key}' in safetensors                     
                    file: {e}")                                                    
                                                        raise e                    
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def load_into(ckpt, model,                 
                    prefix, device,                                                
                                        dtype=None, remap=None):                   
                                        for key in ckpt.keys():                    
                                        model_key = key                            
                                        if remap is not None and                   
                    key in remap:                                                  
                                        model_key = remap                          
                                        if                                         
                    model_key.startswith(prefix) and not                           
                                        model_key.startswith('loss.                
                    '):                                                            
                                        path = model_key.split('.')                
                                        obj = model                                
                                        for p in path:                             
                                        if obj is list:                            
                                        obj = obj                                  
                                        else:                                      
                                        obj = getattr(obj, p, None)                
                                        if obj is None:                            
                                        print(f"Skipping key                       
                    '{model_key}' in                                               
                                        safetensors file as '{p}'                  
                    does not exist in                                              
                                        python model")                             
                                        break                                      
                                        if obj is None:                            
                                        continue                                   
                                        try:                                       
                                        tensor =                                   
                                        ckpt.get_tensor(key).to(dev                
                    ice=device)                                                    
                                        if dtype is not None and                   
                    tensor.dtype !=                                                
                                        torch.int32:                               
                                        tensor =                                   
                    tensor.to(dtype=dtype)                                         
                                        obj.requires_grad_(False)                  
                                        if obj.shape !=                            
                    tensor.shape:                                                  
                                        print(f'W: shape mismatch                  
                    for key                                                        
                                        {model_key}, {obj.shape} !=                
                                        {tensor.shape}')                           
                                        obj.set_(tensor)                           
                                        except Exception as e:                     
                                        print(f"Failed to load key                 
                    '{key}' in                                                     
                                        safetensors file: {e}")                    
                                        raise e                                    
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    print                pylint_plugin.py:61                       
                               DEBUG    Skipping class method: load                
                    pylint_plugin.py:61                                            
                               DEBUG    Skipping class method:                     
                    get_empty_latent     pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    get_sigmas           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    get_noise            pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    get_cond             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    max_denoise          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    fix_cond             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    do_sampling          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    vae_encode           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    vae_encode_tensor    pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    vae_decode           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _image_to_latent     pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    gen_image            pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function: main at                 
                    line 550                                                       
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        @torch.no_grad()                           
                                        def main(prompt=PROMPT,                    
                    model=MODEL,                                                   
                                        out_dir=OUTDIR,                            
                    postfix=None, seed=SEED,                                       
                                        seed_type=SEEDTYPE,                        
                    sampler=None,                                                  
                                        steps=None, cfg=None,                      
                    shift=None,                                                    
                                        width=WIDTH, height=HEIGHT,                
                                        controlnet_ckpt=None,                      
                                        controlnet_cond_image=None,                
                    vae=VAEFile,                                                   
                                        init_image=INIT_IMAGE,                     
                    denoise=DENOISE,                                               
                                        skip_layer_cfg=False,                      
                    verbose=False,                                                 
                                        model_folder=MODEL_FOLDER,                 
                                        text_encoder_device='cpu',                 
                    **kwargs):                                                     
                                            assert not kwargs,                     
                    f'Unknown arguments:                                           
                                        {kwargs}'                                  
                                            config =                               
                                        CONFIGS.get(os.path.splitex                
                    t(os.path.basena                                               
                                        me(model))[0], {})                         
                                            _shift = shift or                      
                    config.get('shift',                                            
                                        3)                                         
                                            _steps = steps or                      
                    config.get('steps',                                            
                                        50)                                        
                                            _cfg = cfg or                          
                    config.get('cfg', 5)                                           
                                            _sampler = sampler or                  
                                        config.get('sampler',                      
                    'dpmpp_2m')                                                    
                                            if skip_layer_cfg:                     
                                                skip_layer_config =                
                                        CONFIGS.get(os.path.splitex                
                    t(os.path.basena                                               
                                        me(model))[0],                             
                    {}).get('skip_layer_config',                                   
                                        {})                                        
                                                cfg =                              
                    skip_layer_config.get('cfg',                                   
                                        cfg)                                       
                                            else:                                  
                                                skip_layer_config =                
                    {}                                                             
                                            if controlnet_ckpt is                  
                    not None:                                                      
                                                controlnet_config =                
                                        CONFIGS.get(os.path.splitex                
                    t(os.path.basena                                               
                                        me(controlnet_ckpt))[0],                   
                    {})                                                            
                                                _shift = shift or                  
                                        controlnet_config.get('shif                
                    t', shift)                                                     
                                                _steps = steps or                  
                                        controlnet_config.get('step                
                    s', steps)                                                     
                                                _cfg = cfg or                      
                                        controlnet_config.get('cfg'                
                    , cfg)                                                         
                                                _sampler = sampler                 
                    or                                                             
                                        controlnet_config.get('samp                
                    ler', sampler)                                                 
                                            inferencer =                           
                    SD3Inferencer()                                                
                                            inferencer.load(model,                 
                    vae, _shift,                                                   
                                        controlnet_ckpt,                           
                    model_folder,                                                  
                                        text_encoder_device,                       
                    verbose)                                                       
                                            if isinstance(prompt,                  
                    str):                                                          
                                                if                                 
                    os.path.splitext(prompt)[-1] ==                                
                                        '.txt':                                    
                                                    with                           
                    open(prompt, 'r') as f:                                        
                                                        prompts =                  
                                                else:                              
                                                    prompts =                      
                                            sanitized_prompt =                     
                                        re.sub('[^\\w\\-\\.]', '_',                
                    prompt)                                                        
                                            out_dir =                              
                    os.path.join(out_dir,                                          
                                        os.path.splitext(os.path.ba                
                    sename(model))[0                                               
                                        ] + ('_' +                                 
                                        os.path.splitext(os.path.ba                
                    sename(controlne                                               
                                        t_ckpt))[0] if                             
                    controlnet_ckpt is not None                                    
                                        else ''),                                  
                                        os.path.splitext(os.path.ba                
                    sename(sanitized                                               
                                        _prompt))[0][:50] +                        
                    (postfix or                                                    
                                        datetime.datetime.now().str                
                    ftime('_%Y-%m-%d                                               
                                        T%H-%M-%S')))                              
                                            os.makedirs(out_dir,                   
                    exist_ok=False)                                                
                                            inferencer.gen_image(pr                
                    ompts, width,                                                  
                                        height, _steps, _cfg,                      
                    _sampler, seed,                                                
                                        seed_type, out_dir,                        
                    controlnet_cond_image,                                         
                                        init_image, denoise,                       
                    skip_layer_config)                                             
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        @torch.no_grad()                           
                                        def main(prompt=PROMPT,                    
                    model=MODEL,                                                   
                                        out_dir=OUTDIR,                            
                    postfix=None, seed=SEED,                                       
                                        seed_type=SEEDTYPE,                        
                    sampler=None,                                                  
                                        steps=None, cfg=None,                      
                    shift=None,                                                    
                                        width=WIDTH, height=HEIGHT,                
                                        controlnet_ckpt=None,                      
                                        controlnet_cond_image=None,                
                    vae=VAEFile,                                                   
                                        init_image=INIT_IMAGE,                     
                    denoise=DENOISE,                                               
                                        skip_layer_cfg=False,                      
                    verbose=False,                                                 
                                        model_folder=MODEL_FOLDER,                 
                                        text_encoder_device='cpu',                 
                    **kwargs):                                                     
                                        assert not kwargs,                         
                    f'Unknown arguments:                                           
                                        {kwargs}'                                  
                                        config =                                   
                                        CONFIGS.get(os.path.splitex                
                    t(os.path.basena                                               
                                        me(model))[0], {})                         
                                        _shift = shift or                          
                    config.get('shift', 3)                                         
                                        _steps = steps or                          
                    config.get('steps', 50)                                        
                                        _cfg = cfg or                              
                    config.get('cfg', 5)                                           
                                        _sampler = sampler or                      
                    config.get('sampler',                                          
                                        'dpmpp_2m')                                
                                        if skip_layer_cfg:                         
                                        skip_layer_config =                        
                                        CONFIGS.get(os.path.splitex                
                    t(os.path.basena                                               
                                        me(model))[0],                             
                    {}).get('skip_layer_config',                                   
                                        {})                                        
                                        cfg =                                      
                    skip_layer_config.get('cfg', cfg)                              
                                        else:                                      
                                        skip_layer_config = {}                     
                                        if controlnet_ckpt is not                  
                    None:                                                          
                                        controlnet_config =                        
                                        CONFIGS.get(os.path.splitex                
                    t(os.path.basena                                               
                                        me(controlnet_ckpt))[0],                   
                    {})                                                            
                                        _shift = shift or                          
                                        controlnet_config.get('shif                
                    t', shift)                                                     
                                        _steps = steps or                          
                                        controlnet_config.get('step                
                    s', steps)                                                     
                                        _cfg = cfg or                              
                    controlnet_config.get('cfg',                                   
                                        cfg)                                       
                                        _sampler = sampler or                      
                                        controlnet_config.get('samp                
                    ler', sampler)                                                 
                                        inferencer =                               
                    SD3Inferencer()                                                
                                        inferencer.load(model, vae,                
                    _shift,                                                        
                                        controlnet_ckpt,                           
                    model_folder,                                                  
                                        text_encoder_device,                       
                    verbose)                                                       
                                        if isinstance(prompt, str):                
                                        if                                         
                    os.path.splitext(prompt)[-1] == '.txt':                        
                                        with open(prompt, 'r') as                  
                    f:                                                             
                                        prompts =                                  
                                        else:                                      
                                        prompts =                                  
                                        sanitized_prompt =                         
                    re.sub('[^\\w\\-\\.]',                                         
                                        '_', prompt)                               
                                        out_dir =                                  
                    os.path.join(out_dir,                                          
                                        os.path.splitext(os.path.ba                
                    sename(model))[0                                               
                                        ] + ('_' +                                 
                                        os.path.splitext(os.path.ba                
                    sename(controlne                                               
                                        t_ckpt))[0] if                             
                    controlnet_ckpt is not None                                    
                                        else ''),                                  
                                        os.path.splitext(os.path.ba                
                    sename(sanitized                                               
                                        _prompt))[0][:50] +                        
                    (postfix or                                                    
                                        datetime.datetime.now().str                
                    ftime('_%Y-%m-%d                                               
                                        T%H-%M-%S')))                              
                                        os.makedirs(out_dir,                       
                    exist_ok=False)                                                
                                        inferencer.gen_image(prompt                
                    s, width,                                                      
                                        height, _steps, _cfg,                      
                    _sampler, seed,                                                
                                        seed_type, out_dir,                        
                    controlnet_cond_image,                                         
                                        init_image, denoise,                       
                    skip_layer_config)                                             
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    debug_tensor         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        debug_model_gradients                      
                               DEBUG    Skipping class method:                     
                    debug_backward_graph pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        _print_backward_graph                      
                               DEBUG    Skipping class method:                     
                    debug_model          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __enter__            pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __exit__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        attach_gradient_hooks                      
                               DEBUG    Skipping class method:                     
                    grad_hook            pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _shift_timestep      pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _get_features        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __call__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    update               pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    apply_shadow         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    restore              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    reset_metrics        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    log_metrics          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    save_checkpoint      pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    load_checkpoint      pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                    [06:21:06] DEBUG    Skipping class method:                     
                    train_images         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    train_videos         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    train                pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    initialize_models at                                           
                                        line 400                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    initialize_models(pretrained_mmdit:                            
                                        MMDiTX, max_timesteps: int                 
                    = 1000):                                                       
                                            """Initialize generator                
                    and                                                            
                                        discriminator (Sections                    
                    3.2, 3.3)."""                                                  
                                            generator =                            
                                        APTGenerator(pretrained_mmd                
                    it,                                                            
                                        max_timesteps)                             
                                            import copy                            
                                            discriminator_mmdit =                  
                                        copy.deepcopy(pretrained_mm                
                    dit)                                                           
                                            discriminator =                        
                                        APTDiscriminator(discrimina                
                    tor_mmdit,                                                     
                                        max_timesteps=max_timesteps                
                    )                                                              
                                            return generator,                      
                    discriminator                                                  
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    initialize_models(pretrained_mmdit:                            
                                        MMDiTX, max_timesteps: int                 
                    = 1000):                                                       
                                        generator =                                
                    APTGenerator(pretrained_mmdit,                                 
                                        max_timesteps)                             
                                        import copy                                
                                        discriminator_mmdit =                      
                                        copy.deepcopy(pretrained_mm                
                    dit)                                                           
                                        discriminator =                            
                                        APTDiscriminator(discrimina                
                    tor_mmdit,                                                     
                                        max_timesteps=max_timesteps                
                    )                                                              
                                        return generator,                          
                    discriminator                                                  
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    train_apt at line 412                                          
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    train_apt(image_data_loader,                                   
                                        video_data_loader):                        
                                            """Training pipeline                   
                    with provided                                                  
                                        MMDiTX initialization                      
                    (Section 3.5)."""                                              
                                            device =                               
                    torch.device('cuda' if                                         
                                        torch.cuda.is_available()                  
                    else 'cpu')                                                    
                                            pretrained_mmdit =                     
                                        MMDiTX(input_size=None,                    
                    patch_size=2,                                                  
                                        in_channels=4, depth=36,                   
                    mlp_ratio=4.0,                                                 
                                        learn_sigma=False,                         
                    adm_in_channels=768,                                           
                                        context_embedder_config={'t                
                    arget':                                                        
                                        'torch.nn.Linear',                         
                    'params':                                                      
                                        {'in_features': 768,                       
                    'out_features':                                                
                                        1152}}, rmsnorm=False,                     
                                        scale_mod_only=False,                      
                    swiglu=False,                                                  
                                        out_channels=4,                            
                    pos_embed_max_size=64,                                         
                                        num_patches=4096,                          
                    qk_norm=None,                                                  
                                        x_block_self_attn_layers=[]                
                    , qkv_bias=True,                                               
                                        dtype=torch.bfloat16,                      
                    device=device,                                                 
                                        verbose=True)                              
                                            pretrained_mmdit.x_embe                
                    dder.proj =                                                    
                                        nn.Conv2d(4, 1152,                         
                    kernel_size=2, stride=2,                                       
                                        bias=True,                                 
                    dtype=torch.bfloat16,                                          
                                        device=device)                             
                                            for block in                           
                                        pretrained_mmdit.joint_bloc                
                    ks:                                                            
                                                block.context_block                
                    .attn.qkv =                                                    
                                        nn.Linear(1152, 1152 * 3,                  
                    bias=True,                                                     
                                        dtype=torch.bfloat16,                      
                    device=device)                                                 
                                                block.context_block                
                    .attn.proj =                                                   
                                        nn.Linear(1152, 1152,                      
                    dtype=torch.bfloat16,                                          
                                        device=device)                             
                                                block.x_block.attn.                
                    qkv =                                                          
                                        nn.Linear(1152, 1152 * 3,                  
                    bias=True,                                                     
                                        dtype=torch.bfloat16,                      
                    device=device)                                                 
                                                block.x_block.attn.                
                    proj =                                                         
                                        nn.Linear(1152, 1152,                      
                    dtype=torch.bfloat16,                                          
                                        device=device)                             
                                                block.x_block.mlp.f                
                    c1 =                                                           
                                        nn.Linear(1152, int(1152 *                 
                    4),                                                            
                                        dtype=torch.bfloat16,                      
                    device=device)                                                 
                                                block.x_block.mlp.f                
                    c2 =                                                           
                                        nn.Linear(int(1152 * 4),                   
                    1152,                                                          
                                        dtype=torch.bfloat16,                      
                    device=device)                                                 
                                            pretrained_mmdit.final_                
                    layer.linear =                                                 
                                        nn.Linear(1152, 2 * 2 * 4,                 
                    bias=True,                                                     
                                        dtype=torch.bfloat16,                      
                    device=device)                                                 
                                            pretrained_mmdit.final_                
                    layer.adaLN_modu                                               
                                        lation[-1] =                               
                    nn.Linear(1152, 2 * 1152,                                      
                                        bias=True,                                 
                    dtype=torch.bfloat16,                                          
                                        device=device)                             
                                            (generator,                            
                    discriminator) =                                               
                                        initialize_models(pretraine                
                    d_mmdit)                                                       
                                            r1_reg =                               
                                        ApproximatedR1Regularizatio                
                    n(sigma=0.01,                                                  
                                        lambda_r1=100.0)                           
                                            trainer =                              
                    APTTrainer(generator,                                          
                                        discriminator, r1_reg,                     
                    learning_rate=5e-06)                                           
                                            for epoch in                           
                    range(350):                                                    
                                                for (real_samples,                 
                    conditions) in                                                 
                                        image_data_loader:                         
                                                    real_samples =                 
                                        real_samples.unsqueeze(1)                  
                                                    (g_loss,                       
                    d_loss) =                                                      
                                        trainer.train_step(real_sam                
                    ples,                                                          
                                        conditions, is_video=False)                
                                                    logger.debug(f'                
                    Image Epoch                                                    
                                        {epoch}, G Loss: {g_loss},                 
                    D Loss:                                                        
                                        {d_loss}')                                 
                                            ema_checkpoint =                       
                                        trainer.ema.shadow.copy()                  
                                            (generator,                            
                    discriminator) =                                               
                                        initialize_models(pretraine                
                    d_mmdit)                                                       
                                            for (name, param) in                   
                                        generator.named_parameters(                
                    ):                                                             
                                                if name in                         
                    ema_checkpoint:                                                
                                                    param.data =                   
                                        ema_checkpoint.clone()                     
                                            r1_reg =                               
                                        ApproximatedR1Regularizatio                
                    n(sigma=0.1,                                                   
                                        lambda_r1=100.0)                           
                                            trainer =                              
                    APTTrainer(generator,                                          
                                        discriminator, r1_reg,                     
                    learning_rate=3e-06)                                           
                                            for epoch in                           
                    range(300):                                                    
                                                for (real_samples,                 
                    conditions) in                                                 
                                        video_data_loader:                         
                                                    (g_loss,                       
                    d_loss) =                                                      
                                        trainer.train_step(real_sam                
                    ples,                                                          
                                        conditions, is_video=True)                 
                                                    logger.debug(f'                
                    Video Epoch                                                    
                                        {epoch}, G Loss: {g_loss},                 
                    D Loss:                                                        
                                        {d_loss}')                                 
                                            return trainer                         
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    train_apt(image_data_loader,                                   
                                        video_data_loader):                        
                                        device =                                   
                    torch.device('cuda' if                                         
                                        torch.cuda.is_available()                  
                    else 'cpu')                                                    
                                        pretrained_mmdit =                         
                    MMDiTX(input_size=None,                                        
                                        patch_size=2,                              
                    in_channels=4, depth=36,                                       
                                        mlp_ratio=4.0,                             
                    learn_sigma=False,                                             
                                        adm_in_channels=768,                       
                                        context_embedder_config={'t                
                    arget':                                                        
                                        'torch.nn.Linear',                         
                    'params':                                                      
                                        {'in_features': 768,                       
                    'out_features':                                                
                                        1152}}, rmsnorm=False,                     
                                        scale_mod_only=False,                      
                    swiglu=False,                                                  
                                        out_channels=4,                            
                    pos_embed_max_size=64,                                         
                                        num_patches=4096,                          
                    qk_norm=None,                                                  
                                        x_block_self_attn_layers=[]                
                    , qkv_bias=True,                                               
                                        dtype=torch.bfloat16,                      
                    device=device,                                                 
                                        verbose=True)                              
                                        pretrained_mmdit.x_embedder                
                    .proj =                                                        
                                        nn.Conv2d(4, 1152,                         
                    kernel_size=2, stride=2,                                       
                                        bias=True,                                 
                    dtype=torch.bfloat16,                                          
                                        device=device)                             
                                        for block in                               
                    pretrained_mmdit.joint_blocks:                                 
                                        block.context_block.attn.qk                
                    v =                                                            
                                        nn.Linear(1152, 1152 * 3,                  
                    bias=True,                                                     
                                        dtype=torch.bfloat16,                      
                    device=device)                                                 
                                        block.context_block.attn.pr                
                    oj =                                                           
                                        nn.Linear(1152, 1152,                      
                    dtype=torch.bfloat16,                                          
                                        device=device)                             
                                        block.x_block.attn.qkv =                   
                    nn.Linear(1152,                                                
                                        1152 * 3, bias=True,                       
                    dtype=torch.bfloat16,                                          
                                        device=device)                             
                                        block.x_block.attn.proj =                  
                    nn.Linear(1152,                                                
                                        1152, dtype=torch.bfloat16,                
                    device=device)                                                 
                                        block.x_block.mlp.fc1 =                    
                    nn.Linear(1152,                                                
                                        int(1152 * 4),                             
                    dtype=torch.bfloat16,                                          
                                        device=device)                             
                                        block.x_block.mlp.fc2 =                    
                    nn.Linear(int(1152                                             
                                        * 4), 1152,                                
                    dtype=torch.bfloat16,                                          
                                        device=device)                             
                                        pretrained_mmdit.final_laye                
                    r.linear =                                                     
                                        nn.Linear(1152, 2 * 2 * 4,                 
                    bias=True,                                                     
                                        dtype=torch.bfloat16,                      
                    device=device)                                                 
                                        pretrained_mmdit.final_laye                
                    r.adaLN_modulati                                               
                                        on[-1] = nn.Linear(1152, 2                 
                    * 1152,                                                        
                                        bias=True,                                 
                    dtype=torch.bfloat16,                                          
                                        device=device)                             
                                        (generator, discriminator)                 
                    =                                                              
                                        initialize_models(pretraine                
                    d_mmdit)                                                       
                                        r1_reg =                                   
                                        ApproximatedR1Regularizatio                
                    n(sigma=0.01,                                                  
                                        lambda_r1=100.0)                           
                                        trainer =                                  
                    APTTrainer(generator,                                          
                                        discriminator, r1_reg,                     
                    learning_rate=5e-06)                                           
                                        for epoch in range(350):                   
                                        for (real_samples,                         
                    conditions) in                                                 
                                        image_data_loader:                         
                                        real_samples =                             
                    real_samples.unsqueeze(1)                                      
                                        (g_loss, d_loss) =                         
                                        trainer.train_step(real_sam                
                    ples,                                                          
                                        conditions, is_video=False)                
                                                                                   
                                        ema_checkpoint =                           
                    trainer.ema.shadow.copy()                                      
                                        (generator, discriminator)                 
                    =                                                              
                                        initialize_models(pretraine                
                    d_mmdit)                                                       
                                        for (name, param) in                       
                                        generator.named_parameters(                
                    ):                                                             
                                        if name in ema_checkpoint:                 
                                        param.data =                               
                    ema_checkpoint.clone()                                         
                                        r1_reg =                                   
                                        ApproximatedR1Regularizatio                
                    n(sigma=0.1,                                                   
                                        lambda_r1=100.0)                           
                                        trainer =                                  
                    APTTrainer(generator,                                          
                                        discriminator, r1_reg,                     
                    learning_rate=3e-06)                                           
                                        for epoch in range(300):                   
                                        for (real_samples,                         
                    conditions) in                                                 
                                        video_data_loader:                         
                                        (g_loss, d_loss) =                         
                                        trainer.train_step(real_sam                
                    ples,                                                          
                                        conditions, is_video=True)                 
                                                                                   
                                        return trainer                             
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    load_sd35_weights at                                           
                                        line 486                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    load_sd35_weights(model_path: str,                             
                                        device: str = 'cuda',                      
                    dtype: torch.dtype =                                           
                                        torch.bfloat16) -> dict:                   
                                            logger.info(f'Loading                  
                    SD3.5 weights                                                  
                                        from {model_path}')                        
                                            with                                   
                    safe_open(model_path,                                          
                                        framework='pt',                            
                    device=device) as f:                                           
                                                state_dict = {k:                   
                                        f.get_tensor(k).to(dtype=dt                
                    ype) for k in                                                  
                                        f.keys()}                                  
                                            logger.info(f'Loaded                   
                    {len(state_dict)}                                              
                                        weight tensors')                           
                                            expected_mappings =                    
                                        {'model.diffusion_model.x_e                
                    mbedder.proj.wei                                               
                                        ght': (1024, 16, 2, 2),                    
                                        'model.diffusion_model.y_em                
                    bedder.mlp.0.wei                                               
                                        ght': (1152, 4096),                        
                                        'model.diffusion_model.join                
                    t_blocks.0.conte                                               
                                        xt_block.attn.qkv.weight':                 
                    (3072, 1024),                                                  
                                        'model.diffusion_model.fina                
                    l_layer.linear.w                                               
                                        eight': (16, 1024)}                        
                                            mapped_state_dict = {}                 
                                            prefix =                               
                    'model.diffusion_model.'                                       
                                            missing_keys = []                      
                                            shape_mismatches = []                  
                                            for (key, tensor) in                   
                                        state_dict.items():                        
                                                if                                 
                    key.startswith(prefix):                                        
                                                    new_key = key                  
                                                    mapped_key =                   
                    new_key                                                        
                                                    if 'x_embedder'                
                    in new_key:                                                    
                                                        mapped_key                 
                    =                                                              
                                        f"x_embedder.{new_key.split                
                    ('x_embedder.')[                                               
                                        -1]}"                                      
                                                    elif                           
                    'y_embedder' in new_key:                                       
                                                        mapped_key                 
                    =                                                              
                                        f"y_embedder.{new_key.split                
                    ('y_embedder.')[                                               
                                        -1]}"                                      
                                                    mapped_state_di                
                    ct = tensor                                                    
                                                    if key in                      
                    expected_mappings:                                             
                                                        expected_sh                
                    ape =                                                          
                                        expected_mappings                          
                                                        if                         
                    tuple(tensor.shape) !=                                         
                                        expected_shape:                            
                                                            shape_m                
                    ismatches.append                                               
                                        (f'{key}: Expected                         
                    {expected_shape}, got                                          
                                        {tuple(tensor.shape)}')                    
                                                    logger.debug(f'                
                    Loaded {key} ->                                                
                                        {mapped_key}:                              
                    {tensor.shape}')                                               
                                                else:                              
                                                    missing_keys.ap                
                    pend(key)                                                      
                                            if missing_keys:                       
                                                logger.warning(f'Ke                
                    ys not mapped:                                                 
                                        {len(missing_keys)} (e.g.,                 
                                        {missing_keys[:5]})')                      
                                            if shape_mismatches:                   
                                                logger.error(f'Shap                
                    e mismatches                                                   
                                        detected:                                  
                    {shape_mismatches}')                                           
                                                raise                              
                    ValueError('Weight shape                                       
                                        validation failed')                        
                                            else:                                  
                                                logger.info('All                   
                    key shapes                                                     
                                        validated successfully')                   
                                            return                                 
                    mapped_state_dict                                              
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    load_sd35_weights(model_path: str,                             
                                        device: str = 'cuda',                      
                    dtype: torch.dtype =                                           
                                        torch.bfloat16) -> dict:                   
                                                                                   
                                        with safe_open(model_path,                 
                    framework='pt',                                                
                                        device=device) as f:                       
                                        state_dict = {k:                           
                                        f.get_tensor(k).to(dtype=dt                
                    ype) for k in                                                  
                                        f.keys()}                                  
                                        } weight tensors')                         
                                        expected_mappings =                        
                                        {'model.diffusion_model.x_e                
                    mbedder.proj.wei                                               
                                        ght': (1024, 16, 2, 2),                    
                                        'model.diffusion_model.y_em                
                    bedder.mlp.0.wei                                               
                                        ght': (1152, 4096),                        
                                        'model.diffusion_model.join                
                    t_blocks.0.conte                                               
                                        xt_block.attn.qkv.weight':                 
                    (3072, 1024),                                                  
                                        'model.diffusion_model.fina                
                    l_layer.linear.w                                               
                                        eight': (16, 1024)}                        
                                        mapped_state_dict = {}                     
                                        prefix =                                   
                    'model.diffusion_model.'                                       
                                        missing_keys = []                          
                                        shape_mismatches = []                      
                                        for (key, tensor) in                       
                    state_dict.items():                                            
                                        if key.startswith(prefix):                 
                                        new_key = key                              
                                        mapped_key = new_key                       
                                        if 'x_embedder' in new_key:                
                                        mapped_key =                               
                                        f"x_embedder.{new_key.split                
                    ('x_embedder.')[                                               
                                        -1]}"                                      
                                        elif 'y_embedder' in                       
                    new_key:                                                       
                                        mapped_key =                               
                                        f"y_embedder.{new_key.split                
                    ('y_embedder.')[                                               
                                        -1]}"                                      
                                        mapped_state_dict = tensor                 
                                        if key in                                  
                    expected_mappings:                                             
                                        expected_shape =                           
                    expected_mappings                                              
                                        if tuple(tensor.shape) !=                  
                    expected_shape:                                                
                                        shape_mismatches.append(f'{                
                    key}: Expected                                                 
                                        {expected_shape}, got                      
                                        {tuple(tensor.shape)}')                    
                                                                                   
                                        else:                                      
                                        missing_keys.append(key)                   
                                        if missing_keys:                           
                                        } (e.g.,                                   
                    {missing_keys[:5]})')                                          
                                        if shape_mismatches:                       
                                                                                   
                                        raise ValueError('Weight                   
                    shape validation                                               
                                        failed')                                   
                                        else:                                      
                                                                                   
                                        return mapped_state_dict                   
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    load_sd35_weights at                                           
                                        line 541                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    load_sd35_weights(model_path: str,                             
                                        device: str = 'cuda',                      
                    dtype: torch.dtype =                                           
                                        torch.bfloat16) -> dict:                   
                                            logger.info(f'Loading                  
                    SD3.5 weights                                                  
                                        from {model_path}')                        
                                            with                                   
                    safe_open(model_path,                                          
                                        framework='pt',                            
                    device=device) as f:                                           
                                                state_dict = {k:                   
                                        f.get_tensor(k).to(dtype=dt                
                    ype) for k in                                                  
                                        f.keys()}                                  
                                            mapped_state_dict = {}                 
                                            prefix =                               
                    'model.diffusion_model.'                                       
                                            for (key, tensor) in                   
                                        state_dict.items():                        
                                                if                                 
                    key.startswith(prefix):                                        
                                                    new_key = key                  
                                                    if 'x_embedder'                
                    in new_key:                                                    
                                                        mapped_key                 
                    =                                                              
                                        f"x_embedder.{new_key.split                
                    ('x_embedder.')[                                               
                                        -1]}"                                      
                                                    elif                           
                    'y_embedder' in new_key:                                       
                                                        mapped_key                 
                    =                                                              
                                        f"y_embedder.{new_key.split                
                    ('y_embedder.')[                                               
                                        -1]}"                                      
                                                    else:                          
                                                        mapped_key                 
                    = new_key                                                      
                                                    mapped_state_di                
                    ct = tensor                                                    
                                                    logger.debug(f'                
                    Loaded {key} ->                                                
                                        {mapped_key}:                              
                    {tensor.shape}')                                               
                                            logger.info(f'Loaded                   
                    and mapped                                                     
                                        {len(mapped_state_dict)}                   
                    weights')                                                      
                                            return                                 
                    mapped_state_dict                                              
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    load_sd35_weights(model_path: str,                             
                                        device: str = 'cuda',                      
                    dtype: torch.dtype =                                           
                                        torch.bfloat16) -> dict:                   
                                                                                   
                                        with safe_open(model_path,                 
                    framework='pt',                                                
                                        device=device) as f:                       
                                        state_dict = {k:                           
                                        f.get_tensor(k).to(dtype=dt                
                    ype) for k in                                                  
                                        f.keys()}                                  
                                        mapped_state_dict = {}                     
                                        prefix =                                   
                    'model.diffusion_model.'                                       
                                        for (key, tensor) in                       
                    state_dict.items():                                            
                                        if key.startswith(prefix):                 
                                        new_key = key                              
                                        if 'x_embedder' in new_key:                
                                        mapped_key =                               
                                        f"x_embedder.{new_key.split                
                    ('x_embedder.')[                                               
                                        -1]}"                                      
                                        elif 'y_embedder' in                       
                    new_key:                                                       
                                        mapped_key =                               
                                        f"y_embedder.{new_key.split                
                    ('y_embedder.')[                                               
                                        -1]}"                                      
                                        else:                                      
                                        mapped_key = new_key                       
                                        mapped_state_dict = tensor                 
                                                                                   
                                        } weights')                                
                                        return mapped_state_dict                   
                               DEBUG                                               
                    pylint_plugin.py:74                                            
                                        Comparing with existing                    
                    function                                                       
                                        load_sd35_weights at line                  
                    486                                                            
                               DEBUG    Differences:                               
                    pylint_plugin.py:78                                            
                               DEBUG    - } weight tensors')                       
                    pylint_plugin.py:81                                            
                               DEBUG    - expected_mappings =                      
                    pylint_plugin.py:81                                            
                                        {'model.diffusion_model.x_e                
                    mbedder.proj.wei                                               
                                        ght': (1024, 16, 2, 2),                    
                                        'model.diffusion_model.y_em                
                    bedder.mlp.0.wei                                               
                                        ght': (1152, 4096),                        
                                        'model.diffusion_model.join                
                    t_blocks.0.conte                                               
                                        xt_block.attn.qkv.weight':                 
                    (3072, 1024),                                                  
                                        'model.diffusion_model.fina                
                    l_layer.linear.w                                               
                                        eight': (16, 1024)}                        
                               DEBUG    - missing_keys = []                        
                    pylint_plugin.py:81                                            
                               DEBUG    - shape_mismatches = []                    
                    pylint_plugin.py:81                                            
                               DEBUG    - mapped_key = new_key                     
                    pylint_plugin.py:81                                            
                               DEBUG    + else:                                    
                    pylint_plugin.py:81                                            
                               DEBUG    + mapped_key = new_key                     
                    pylint_plugin.py:81                                            
                               DEBUG    - if key in                                
                    expected_mappings:                                             
                    pylint_plugin.py:81                                            
                               DEBUG    - expected_shape =                         
                    expected_mappings        pylint_plugin.py:81                   
                               DEBUG    - if tuple(tensor.shape) !=                
                    expected_shape: pylint_plugin.py:81                            
                               DEBUG    -                                          
                    shape_mismatches.append(f'{key}: Expected                      
                    pylint_plugin.py:81                                            
                                        {expected_shape}, got                      
                                        {tuple(tensor.shape)}')                    
                               DEBUG    + } weights')                              
                    pylint_plugin.py:81                                            
                               DEBUG    - else:                                    
                    pylint_plugin.py:81                                            
                               DEBUG    - missing_keys.append(key)                 
                    pylint_plugin.py:81                                            
                               DEBUG    - if missing_keys:                         
                    pylint_plugin.py:81                                            
                               DEBUG    - } (e.g.,                                 
                    {missing_keys[:5]})')                                          
                    pylint_plugin.py:81                                            
                               DEBUG    - if shape_mismatches:                     
                    pylint_plugin.py:81                                            
                               DEBUG    -                                          
                    pylint_plugin.py:81                                            
                               DEBUG    - raise ValueError('Weight                 
                    shape validation pylint_plugin.py:81                           
                                        failed')                                   
                               DEBUG    - else:                                    
                    pylint_plugin.py:81                                            
                               DEBUG    -                                          
                    pylint_plugin.py:81                                            
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        _validate_initialization                   
                               DEBUG    Skipping class method:                     
                    set_learning_rate    pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    set_r1_sigma         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    train_step           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    generate_samples     pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    train_images         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    train_videos         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    train                pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function: main at                 
                    line 794                                                       
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def main():                                
                                            config =                               
                    APTConfig(train_images=True,                                   
                                        train_videos=True,                         
                    image_batch_size=8,                                            
                                        video_batch_size=8,                        
                    world_size=1,                                                  
                                        local_rank=0,                              
                    device='cuda',                                                 
                                        dtype=torch.bfloat16)                      
                                                                                   
                                                                                   
                                            class                                  
                                        DummyDataset(torch.utils.da                
                    ta.Dataset):                                                   
                                                                                   
                                                def __init__(self,                 
                    is_video=False):                                               
                                                    self.is_video =                
                    is_video                                                       
                                                                                   
                                                def __len__(self):                 
                                                    return 100                     
                                                                                   
                                                def                                
                    __getitem__(self, idx):                                        
                                                    if                             
                    self.is_video:                                                 
                                                        return                     
                    torch.randn(48, 16,                                            
                                        45, 80), torch.randn(4096)                 
                                                    return                         
                    torch.randn(16, 64, 64),                                       
                                        torch.randn(4096)                          
                                                                                   
                                            image_loader =                         
                                        torch.utils.data.DataLoader                
                    (DummyDataset(is                                               
                                        _video=False),                             
                                        batch_size=config.image_bat                
                    ch_size)                                                       
                                            video_loader =                         
                                        torch.utils.data.DataLoader                
                    (DummyDataset(is                                               
                                        _video=True),                              
                                        batch_size=config.video_bat                
                    ch_size)                                                       
                                            trainer =                              
                                        SeaweedTrainer(model_path='                
                    ./models/sd3.5_m                                               
                                        edium.safetensors',                        
                    config=config,                                                 
                                        image_dataloader=image_load                
                    er,                                                            
                                        video_dataloader=video_load                
                    er)                                                            
                                            trainer.train()                        
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def main():                                
                                        config =                                   
                    APTConfig(train_images=True,                                   
                                        train_videos=True,                         
                    image_batch_size=8,                                            
                                        video_batch_size=8,                        
                    world_size=1,                                                  
                                        local_rank=0,                              
                    device='cuda',                                                 
                                        dtype=torch.bfloat16)                      
                                        class                                      
                                        DummyDataset(torch.utils.da                
                    ta.Dataset):                                                   
                                        def __init__(self,                         
                    is_video=False):                                               
                                        self.is_video = is_video                   
                                        def __len__(self):                         
                                        return 100                                 
                                        def __getitem__(self, idx):                
                                        if self.is_video:                          
                                        return torch.randn(48, 16,                 
                    45, 80),                                                       
                                        torch.randn(4096)                          
                                        return torch.randn(16, 64,                 
                    64),                                                           
                                        torch.randn(4096)                          
                                        image_loader =                             
                                        torch.utils.data.DataLoader                
                    (DummyDataset(is                                               
                                        _video=False),                             
                                        batch_size=config.image_bat                
                    ch_size)                                                       
                                        video_loader =                             
                                        torch.utils.data.DataLoader                
                    (DummyDataset(is                                               
                                        _video=True),                              
                                        batch_size=config.video_bat                
                    ch_size)                                                       
                                        trainer =                                  
                                        SeaweedTrainer(model_path='                
                    ./models/sd3.5_m                                               
                                        edium.safetensors',                        
                    config=config,                                                 
                                        image_dataloader=image_load                
                    er,                                                            
                                        video_dataloader=video_load                
                    er)                                                            
                                        trainer.train()                            
                               DEBUG                                               
                    pylint_plugin.py:74                                            
                                        Comparing with existing                    
                    function main at                                               
                                        line 550                                   
                               DEBUG    Differences:                               
                    pylint_plugin.py:78                                            
                               DEBUG    + def main():                              
                    pylint_plugin.py:81                                            
                               DEBUG    + config =                                 
                    APTConfig(train_images=True,                                   
                    pylint_plugin.py:81                                            
                                        train_videos=True,                         
                    image_batch_size=8,                                            
                                        video_batch_size=8,                        
                    world_size=1,                                                  
                                        local_rank=0,                              
                    device='cuda',                                                 
                                        dtype=torch.bfloat16)                      
                               DEBUG    + class                                    
                    pylint_plugin.py:81                                            
                                        DummyDataset(torch.utils.da                
                    ta.Dataset):                                                   
                               DEBUG    + def __init__(self,                       
                    is_video=False):       pylint_plugin.py:81                     
                               DEBUG    + self.is_video = is_video                 
                    pylint_plugin.py:81                                            
                               DEBUG    + def __len__(self):                       
                    pylint_plugin.py:81                                            
                               DEBUG    + return 100                               
                    pylint_plugin.py:81                                            
                               DEBUG    + def __getitem__(self,                    
                    idx):               pylint_plugin.py:81                        
                               DEBUG    + if self.is_video:                        
                    pylint_plugin.py:81                                            
                               DEBUG    + return torch.randn(48,                   
                    16, 45, 80),       pylint_plugin.py:81                         
                                        torch.randn(4096)                          
                               DEBUG    + return torch.randn(16,                   
                    64, 64),           pylint_plugin.py:81                         
                                        torch.randn(4096)                          
                               DEBUG    + image_loader =                           
                    pylint_plugin.py:81                                            
                                        torch.utils.data.DataLoader                
                    (DummyDataset(is                                               
                                        _video=False),                             
                                        batch_size=config.image_bat                
                    ch_size)                                                       
                               DEBUG    + video_loader =                           
                    pylint_plugin.py:81                                            
                                        torch.utils.data.DataLoader                
                    (DummyDataset(is                                               
                                        _video=True),                              
                                        batch_size=config.video_bat                
                    ch_size)                                                       
                               DEBUG    + trainer =                                
                    pylint_plugin.py:81                                            
                                        SeaweedTrainer(model_path='                
                    ./models/sd3.5_m                                               
                                        edium.safetensors',                        
                    config=config,                                                 
                                        image_dataloader=image_load                
                    er,                                                            
                                        video_dataloader=video_load                
                    er)                                                            
                               DEBUG    + trainer.train()                          
                    pylint_plugin.py:81                                            
                               DEBUG    - @torch.no_grad()                         
                    pylint_plugin.py:81                                            
                               DEBUG    - def main(prompt=PROMPT,                  
                    model=MODEL,      pylint_plugin.py:81                          
                                        out_dir=OUTDIR,                            
                    postfix=None, seed=SEED,                                       
                                        seed_type=SEEDTYPE,                        
                    sampler=None,                                                  
                                        steps=None, cfg=None,                      
                    shift=None,                                                    
                                        width=WIDTH, height=HEIGHT,                
                                        controlnet_ckpt=None,                      
                                        controlnet_cond_image=None,                
                    vae=VAEFile,                                                   
                                        init_image=INIT_IMAGE,                     
                    denoise=DENOISE,                                               
                                        skip_layer_cfg=False,                      
                    verbose=False,                                                 
                                        model_folder=MODEL_FOLDER,                 
                                        text_encoder_device='cpu',                 
                    **kwargs):                                                     
                               DEBUG    - assert not kwargs,                       
                    f'Unknown arguments:   pylint_plugin.py:81                     
                                        {kwargs}'                                  
                               DEBUG    - config =                                 
                    pylint_plugin.py:81                                            
                                        CONFIGS.get(os.path.splitex                
                    t(os.path.basena                                               
                                        me(model))[0], {})                         
                               DEBUG    - _shift = shift or                        
                    config.get('shift', 3)  pylint_plugin.py:81                    
                               DEBUG    - _steps = steps or                        
                    config.get('steps', 50) pylint_plugin.py:81                    
                               DEBUG    - _cfg = cfg or                            
                    config.get('cfg', 5)        pylint_plugin.py:81                
                               DEBUG    - _sampler = sampler or                    
                    pylint_plugin.py:81                                            
                                        config.get('sampler',                      
                    'dpmpp_2m')                                                    
                               DEBUG    - if skip_layer_cfg:                       
                    pylint_plugin.py:81                                            
                               DEBUG    - skip_layer_config =                      
                    pylint_plugin.py:81                                            
                                        CONFIGS.get(os.path.splitex                
                    t(os.path.basena                                               
                                        me(model))[0],                             
                    {}).get('skip_layer_config',                                   
                                        {})                                        
                               DEBUG    - cfg =                                    
                    skip_layer_config.get('cfg', cfg)                              
                    pylint_plugin.py:81                                            
                               DEBUG    - else:                                    
                    pylint_plugin.py:81                                            
                               DEBUG    - skip_layer_config = {}                   
                    pylint_plugin.py:81                                            
                               DEBUG    - if controlnet_ckpt is not                
                    None:           pylint_plugin.py:81                            
                               DEBUG    - controlnet_config =                      
                    pylint_plugin.py:81                                            
                                        CONFIGS.get(os.path.splitex                
                    t(os.path.basena                                               
                                        me(controlnet_ckpt))[0],                   
                    {})                                                            
                               DEBUG    - _shift = shift or                        
                    pylint_plugin.py:81                                            
                                        controlnet_config.get('shif                
                    t', shift)                                                     
                               DEBUG    - _steps = steps or                        
                    pylint_plugin.py:81                                            
                                        controlnet_config.get('step                
                    s', steps)                                                     
                               DEBUG    - _cfg = cfg or                            
                    pylint_plugin.py:81                                            
                                        controlnet_config.get('cfg'                
                    , cfg)                                                         
                               DEBUG    - _sampler = sampler or                    
                    pylint_plugin.py:81                                            
                                        controlnet_config.get('samp                
                    ler', sampler)                                                 
                               DEBUG    - inferencer =                             
                    SD3Inferencer()                                                
                    pylint_plugin.py:81                                            
                               DEBUG    - inferencer.load(model,                   
                    vae, _shift,       pylint_plugin.py:81                         
                                        controlnet_ckpt,                           
                    model_folder,                                                  
                                        text_encoder_device,                       
                    verbose)                                                       
                               DEBUG    - if isinstance(prompt,                    
                    str):               pylint_plugin.py:81                        
                               DEBUG    - if                                       
                    os.path.splitext(prompt)[-1] ==                                
                    pylint_plugin.py:81                                            
                                        '.txt':                                    
                               DEBUG    - with open(prompt, 'r') as                
                    f:              pylint_plugin.py:81                            
                               DEBUG    - prompts =                                
                    pylint_plugin.py:81                                            
                               DEBUG    - else:                                    
                    pylint_plugin.py:81                                            
                               DEBUG    - prompts =                                
                    pylint_plugin.py:81                                            
                               DEBUG    - sanitized_prompt =                       
                    re.sub('[^\\w\\-\\.]', pylint_plugin.py:81                     
                                        '_', prompt)                               
                               DEBUG    - out_dir =                                
                    os.path.join(out_dir,                                          
                    pylint_plugin.py:81                                            
                                        os.path.splitext(os.path.ba                
                    sename(model))[0                                               
                                        ] + ('_' +                                 
                                        os.path.splitext(os.path.ba                
                    sename(controlne                                               
                                        t_ckpt))[0] if                             
                    controlnet_ckpt is not None                                    
                                        else ''),                                  
                                        os.path.splitext(os.path.ba                
                    sename(sanitized                                               
                                        _prompt))[0][:50] +                        
                    (postfix or                                                    
                                        datetime.datetime.now().str                
                    ftime('_%Y-%m-%d                                               
                                        T%H-%M-%S')))                              
                               DEBUG    - os.makedirs(out_dir,                     
                    exist_ok=False)      pylint_plugin.py:81                       
                               DEBUG    -                                          
                    inferencer.gen_image(prompts, width,                           
                    pylint_plugin.py:81                                            
                                        height, _steps, _cfg,                      
                    _sampler, seed,                                                
                                        seed_type, out_dir,                        
                    controlnet_cond_image,                                         
                                        init_image, denoise,                       
                    skip_layer_config)                                             
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __len__              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __getitem__          pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    attention at line 17                                           
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def attention(q, k, v,                     
                    heads, mask=None):                                             
                                            """Convenience wrapper                 
                    around a basic                                                 
                                        attention operation"""                     
                                            (b, _, dim_head) =                     
                    q.shape                                                        
                                            dim_head //= heads                     
                                            (q, k, v) = map(lambda                 
                    t: t.view(b, -1,                                               
                                        heads,                                     
                    dim_head).transpose(1, 2), (q, k,                              
                                        v))                                        
                                            out =                                  
                                        torch.nn.functional.scaled_                
                    dot_product_atte                                               
                                        ntion(q, k, v,                             
                    attn_mask=mask,                                                
                                        dropout_p=0.0,                             
                    is_causal=False)                                               
                                            return out.transpose(1,                
                    2).reshape(b,                                                  
                                        -1, heads * dim_head)                      
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def attention(q, k, v,                     
                    heads, mask=None):                                             
                                        (b, _, dim_head) = q.shape                 
                                        dim_head //= heads                         
                                        (q, k, v) = map(lambda t:                  
                    t.view(b, -1,                                                  
                                        heads,                                     
                    dim_head).transpose(1, 2), (q, k,                              
                                        v))                                        
                                        out =                                      
                                        torch.nn.functional.scaled_                
                    dot_product_atte                                               
                                        ntion(q, k, v,                             
                    attn_mask=mask,                                                
                                        dropout_p=0.0,                             
                    is_causal=False)                                               
                                        return out.transpose(1,                    
                    2).reshape(b, -1,                                              
                                        heads * dim_head)                          
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    get_input_embeddings pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    set_input_embeddings pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    parse_parentheses at                                           
                                        line 245                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    parse_parentheses(string):                                     
                                            result = []                            
                                            current_item = ''                      
                                            nesting_level = 0                      
                                            for char in string:                    
                                                if char == '(':                    
                                                    if                             
                    nesting_level == 0:                                            
                                                        if                         
                    current_item:                                                  
                                                            result.                
                    append(current_i                                               
                                        tem)                                       
                                                            current                
                    _item = '('                                                    
                                                        else:                      
                                                            current                
                    _item = '('                                                    
                                                    else:                          
                                                        current_ite                
                    m += char                                                      
                                                    nesting_level                  
                    += 1                                                           
                                                elif char == ')':                  
                                                    nesting_level                  
                    -= 1                                                           
                                                    if                             
                    nesting_level == 0:                                            
                                                        result.appe                
                    nd(current_item                                                
                                        + ')')                                     
                                                        current_ite                
                    m = ''                                                         
                                                    else:                          
                                                        current_ite                
                    m += char                                                      
                                                else:                              
                                                    current_item +=                
                    char                                                           
                                            if current_item:                       
                                                result.append(curre                
                    nt_item)                                                       
                                            return result                          
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    parse_parentheses(string):                                     
                                        result = []                                
                                        current_item = ''                          
                                        nesting_level = 0                          
                                        for char in string:                        
                                        if char == '(':                            
                                        if nesting_level == 0:                     
                                        if current_item:                           
                                        result.append(current_item)                
                                        current_item = '('                         
                                        else:                                      
                                        current_item = '('                         
                                        else:                                      
                                        current_item += char                       
                                        nesting_level += 1                         
                                        elif char == ')':                          
                                        nesting_level -= 1                         
                                        if nesting_level == 0:                     
                                        result.append(current_item                 
                    + ')')                                                         
                                        current_item = ''                          
                                        else:                                      
                                        current_item += char                       
                                        else:                                      
                                        current_item += char                       
                                        if current_item:                           
                                        result.append(current_item)                
                                        return result                              
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    token_weights at line                                          
                                        274                                        
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def token_weights(string,                  
                    current_weight):                                               
                                            a =                                    
                    parse_parentheses(string)                                      
                                            out = []                               
                                            for x in a:                            
                                                weight =                           
                    current_weight                                                 
                                                if len(x) >= 2 and                 
                    x[-1] == ')' and                                               
                                        x[0] == '(':                               
                                                    x = x[1:-1]                    
                                                    xx =                           
                    x.rfind(':')                                                   
                                                    weight *= 1.1                  
                                                    if xx > 0:                     
                                                        try:                       
                                                            weight                 
                    = float(x)                                                     
                                                            x =                    
                    x[:xx]                                                         
                                                        except:                    
                                                            pass                   
                                                    out +=                         
                    token_weights(x, weight)                                       
                                                else:                              
                                                    out += [(x,                    
                    current_weight)]                                               
                                            return out                             
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def token_weights(string,                  
                    current_weight):                                               
                                        a =                                        
                    parse_parentheses(string)                                      
                                        out = []                                   
                                        for x in a:                                
                                        weight = current_weight                    
                                        if len(x) >= 2 and x[-1] ==                
                    ')' and x[0] ==                                                
                                        '(':                                       
                                        x = x[1:-1]                                
                                        xx = x.rfind(':')                          
                                        weight *= 1.1                              
                                        if xx > 0:                                 
                                        try:                                       
                                        weight = float(x)                          
                                        x = x[:xx]                                 
                                        except:                                    
                                        pass                                       
                                        out += token_weights(x,                    
                    weight)                                                        
                                        else:                                      
                                        out += [(x,                                
                    current_weight)]                                               
                                        return out                                 
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    escape_important at line                                       
                                        295                                        
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def escape_important(text):                
                                            text =                                 
                    text.replace('\\)', '\x00\x01')                                
                                            text =                                 
                    text.replace('\\(', '\x00\x02')                                
                                            return text                            
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def escape_important(text):                
                                        text = text.replace('\\)',                 
                    '\x00\x01')                                                    
                                        text = text.replace('\\(',                 
                    '\x00\x02')                                                    
                                        return text                                
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    unescape_important at                                          
                                        line 301                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    unescape_important(text):                                      
                                            text =                                 
                    text.replace('\x00\x01', ')')                                  
                                            text =                                 
                    text.replace('\x00\x02', '(')                                  
                                            return text                            
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    unescape_important(text):                                      
                                        text =                                     
                    text.replace('\x00\x01', ')')                                  
                                        text =                                     
                    text.replace('\x00\x02', '(')                                  
                                        return text                                
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        tokenize_with_weights                      
                               DEBUG    Skipping class method:                     
                    untokenize           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        tokenize_with_weights                      
                               DEBUG    Skipping class method:                     
                    encode_token_weights pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    set_clip_options     pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        _relative_position_bucket                  
                               DEBUG    Skipping class method:                     
                    compute_bias         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    get_input_embeddings pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    set_input_embeddings pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __len__              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __getitem__          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __len__              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __getitem__          pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    Skipping class method:                     
                    __post_init__        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __new__              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    get_instance         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        register_default_handlers                  
                               DEBUG    Skipping class method:                     
                    register_handler     pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    dispatch             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _log_event           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _track_failure       pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _update_counts       pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _save_failures       pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    save_summary         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        get_problematic_videos                     
                               DEBUG    Skipping class method:                     
                    get_event_stats      pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    add_video            pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    print_summary        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    reset                pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    parse_log_file at line                                         
                                        187                                        
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                                        parse_log_file(log_path='./                
                    bad_videos/video                                               
                                        _events.log'):                             
                                            """                                    
                                            Parse the video events                 
                    log file to                                                    
                                        extract failed video paths                 
                                            """                                    
                                            failed_videos = set()                  
                                            try:                                   
                                                with open(log_path,                
                    'r') as f:                                                     
                                                    for line in f:                 
                                                        if not                     
                    line.strip():                                                  
                                                            continu                
                    e                                                              
                                                        try:                       
                                                            parts =                
                                        line.strip().split('\t')                   
                                                            if                     
                    len(parts) >= 3:                                               
                                                                (ti                
                    mestamp,                                                       
                                        error_type, filepath) =                    
                    parts[:3]                                                      
                                                                if                 
                    error_type in                                                  
                                        ['face_detection_failed',                  
                                        'landmark_detection_failed'                
                    ,                                                              
                                        'video_too_short']:                        
                                                                                   
                     failed_videos.a                                               
                                        dd(filepath)                               
                                                        except                     
                    Exception as e:                                                
                                                            print(f                
                    'Warning: Could                                                
                                        not parse line:                            
                    {line.strip()}')                                               
                                                            print(f                
                    'Error:                                                        
                                        {str(e)}')                                 
                                                            continu                
                    e                                                              
                                            except                                 
                    FileNotFoundError:                                             
                                                print(f'Error: Log                 
                    file not found                                                 
                                        at {log_path}')                            
                                                return set()                       
                                            except Exception as e:                 
                                                print(f'Error                      
                    reading log file:                                              
                                        {str(e)}')                                 
                                                return set()                       
                                            return failed_videos                   
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                                        parse_log_file(log_path='./                
                    bad_videos/video                                               
                                        _events.log'):                             
                                        failed_videos = set()                      
                                        try:                                       
                                        with open(log_path, 'r') as                
                    f:                                                             
                                        for line in f:                             
                                        if not line.strip():                       
                                        continue                                   
                                        try:                                       
                                        parts =                                    
                    line.strip().split('\t')                                       
                                        if len(parts) >= 3:                        
                                        (timestamp, error_type,                    
                    filepath) =                                                    
                                        parts[:3]                                  
                                        if error_type in                           
                    ['face_detection_failed',                                      
                                        'landmark_detection_failed'                
                    ,                                                              
                                        'video_too_short']:                        
                                        failed_videos.add(filepath)                
                                        except Exception as e:                     
                                        print(f'Warning: Could not                 
                    parse line:                                                    
                                        {line.strip()}')                           
                                        print(f'Error: {str(e)}')                  
                                        continue                                   
                                        except FileNotFoundError:                  
                                        print(f'Error: Log file not                
                    found at                                                       
                                        {log_path}')                               
                                        return set()                               
                                        except Exception as e:                     
                                        print(f'Error reading log                  
                    file: {str(e)}')                                               
                                        return set()                               
                                        return failed_videos                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    remove_failed_videos at                                        
                                        line 224                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                                        remove_failed_videos(log_pa                
                    th='./bad_videos                                               
                                        /video_events.log'):                       
                                            """                                    
                                            Remove videos that                     
                    failed processing                                              
                                        based on the event log                     
                                            """                                    
                                            failed_videos =                        
                                        parse_log_file(log_path)                   
                                            if not failed_videos:                  
                                                print('No failed                   
                    videos found in                                                
                                        the log file.')                            
                                                return                             
                                            removed_count = 0                      
                                            failed_count = 0                       
                                            skipped_count = 0                      
                                            print(f'\nAttempting to                
                    remove                                                         
                                        {len(failed_videos)} unique                
                    failed                                                         
                                        videos...')                                
                                            for filepath in                        
                    failed_videos:                                                 
                                                try:                               
                                                    if                             
                    os.path.exists(filepath):                                      
                                                        os.remove(f                
                    ilepath)                                                       
                                                        print(f'Rem                
                    oved:                                                          
                                        {filepath}')                               
                                                        removed_cou                
                    nt += 1                                                        
                                                    else:                          
                                                        print(f'Ski                
                    pped (not                                                      
                                        found): {filepath}')                       
                                                        skipped_cou                
                    nt += 1                                                        
                                                except Exception as                
                    e:                                                             
                                                    print(f'Error                  
                    removing                                                       
                                        {filepath}: {str(e)}')                     
                                                    failed_count +=                
                    1                                                              
                                            print(f'\nSummary:')                   
                                            print(f'Successfully                   
                    removed:                                                       
                                        {removed_count} files')                    
                                            print(f'Failed to                      
                    remove:                                                        
                                        {failed_count} files')                     
                                            print(f'Skipped (not                   
                    found):                                                        
                                        {skipped_count} files')                    
                                            print(f'Total unique                   
                    failed videos in                                               
                                        log: {len(failed_videos)}')                
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                                        remove_failed_videos(log_pa                
                    th='./bad_videos                                               
                                        /video_events.log'):                       
                                        failed_videos =                            
                    parse_log_file(log_path)                                       
                                        if not failed_videos:                      
                                        print('No failed videos                    
                    found in the log                                               
                                        file.')                                    
                                        return                                     
                                        removed_count = 0                          
                                        failed_count = 0                           
                                        skipped_count = 0                          
                                        print(f'\nAttempting to                    
                    remove                                                         
                                        {len(failed_videos)} unique                
                    failed                                                         
                                        videos...')                                
                                        for filepath in                            
                    failed_videos:                                                 
                                        try:                                       
                                        if                                         
                    os.path.exists(filepath):                                      
                                        os.remove(filepath)                        
                                        print(f'Removed:                           
                    {filepath}')                                                   
                                        removed_count += 1                         
                                        else:                                      
                                        print(f'Skipped (not                       
                    found): {filepath}')                                           
                                        skipped_count += 1                         
                                        except Exception as e:                     
                                        print(f'Error removing                     
                    {filepath}:                                                    
                                        {str(e)}')                                 
                                        failed_count += 1                          
                                        print(f'\nSummary:')                       
                                        print(f'Successfully                       
                    removed:                                                       
                                        {removed_count} files')                    
                                        print(f'Failed to remove:                  
                    {failed_count}                                                 
                                        files')                                    
                                        print(f'Skipped (not                       
                    found):                                                        
                                        {skipped_count} files')                    
                                        print(f'Total unique failed                
                    videos in log:                                                 
                                        {len(failed_videos)}')                     
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    clean_window_cache at                                          
                                        line 268                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    clean_window_cache(cache_dir: str =                            
                                        'cache', pattern: str =                    
                    'window_*.h5'):                                                
                                            """                                    
                                            Delete all window cache                
                    H5 files.                                                      
                                                                                   
                                            Args:                                  
                                                cache_dir:                         
                    Directory containing                                           
                                        cache files                                
                                                pattern: File                      
                    pattern to match                                               
                                        cache files                                
                                            """                                    
                                            try:                                   
                                                cache_path =                       
                    Path(cache_dir)                                                
                                                if not                             
                    cache_path.exists():                                           
                                                    logger.warning(                
                    f'Cache                                                        
                                        directory {cache_dir} does                 
                    not exist')                                                    
                                                    return                         
                                                cache_files =                      
                                        list(cache_path.glob(patter                
                    n))                                                            
                                                if not cache_files:                
                                                    logger.info(f'N                
                    o cache files                                                  
                                        found matching pattern                     
                    {pattern}')                                                    
                                                    return                         
                                                logger.info(f'Found                
                                        {len(cache_files)} cache                   
                    files to delete')                                              
                                                for cache_file in                  
                    cache_files:                                                   
                                                    try:                           
                                                        try:                       
                                                            with                   
                                        h5py.File(cache_file, 'r')                 
                    as f:                                                          
                                                                pas                
                    s                                                              
                                                        except                     
                    Exception:                                                     
                                                            pass                   
                                                        cache_file.                
                    unlink()                                                       
                                                        logger.info                
                    (f'Deleted cache                                               
                                        file: {cache_file}')                       
                                                    except                         
                    Exception as e:                                                
                                                        logger.erro                
                    r(f'Error                                                      
                                        deleting {cache_file}:                     
                    {str(e)}')                                                     
                                                logger.info('Cache                 
                    cleaning                                                       
                                        complete')                                 
                                            except Exception as e:                 
                                                logger.error(f'Erro                
                    r cleaning                                                     
                                        cache: {str(e)}')                          
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    clean_window_cache(cache_dir: str =                            
                                        'cache', pattern: str =                    
                    'window_*.h5'):                                                
                                        try:                                       
                                        cache_path =                               
                    Path(cache_dir)                                                
                                        if not cache_path.exists():                
                                                                                   
                                        return                                     
                                        cache_files =                              
                                        list(cache_path.glob(patter                
                    n))                                                            
                                        if not cache_files:                        
                                                                                   
                                        return                                     
                                        } cache files to delete')                  
                                        for cache_file in                          
                    cache_files:                                                   
                                        try:                                       
                                        try:                                       
                                        with h5py.File(cache_file,                 
                    'r') as f:                                                     
                                        pass                                       
                                        except Exception:                          
                                        pass                                       
                                        cache_file.unlink()                        
                                                                                   
                                        except Exception as e:                     
                                        }')                                        
                                                                                   
                                        except Exception as e:                     
                                        }')                                        
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    clean_specific_window at                                       
                                        line 315                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    clean_specific_window(window_idx: int,                         
                                        cache_dir: str = 'cache'):                 
                                            """                                    
                                            Delete a specific                      
                    window cache file.                                             
                                                                                   
                                            Args:                                  
                                                window_idx: Index                  
                    of window to                                                   
                                        delete                                     
                                                cache_dir:                         
                    Directory containing                                           
                                        cache files                                
                                            """                                    
                                            try:                                   
                                                cache_path =                       
                    Path(cache_dir)                                                
                                                target_file =                      
                    cache_path /                                                   
                                        f'window_{window_idx}.h5'                  
                                                if not                             
                    target_file.exists():                                          
                                                    logger.warning(                
                    f'Cache file for                                               
                                        window {window_idx} does                   
                    not exist')                                                    
                                                    return                         
                                                try:                               
                                                    with                           
                    h5py.File(target_file,                                         
                                        'r') as f:                                 
                                                        pass                       
                                                except Exception:                  
                                                    pass                           
                                                target_file.unlink(                
                    )                                                              
                                                logger.info(f'Delet                
                    ed cache file                                                  
                                        for window {window_idx}')                  
                                            except Exception as e:                 
                                                logger.error(f'Erro                
                    r deleting                                                     
                                        window {window_idx}:                       
                    {str(e)}')                                                     
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    clean_specific_window(window_idx: int,                         
                                        cache_dir: str = 'cache'):                 
                                        try:                                       
                                        cache_path =                               
                    Path(cache_dir)                                                
                                        target_file = cache_path /                 
                                        f'window_{window_idx}.h5'                  
                                        if not                                     
                    target_file.exists():                                          
                                                                                   
                                        return                                     
                                        try:                                       
                                        with h5py.File(target_file,                
                    'r') as f:                                                     
                                        pass                                       
                                        except Exception:                          
                                        pass                                       
                                        target_file.unlink()                       
                                                                                   
                                        except Exception as e:                     
                                        }')                                        
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    - parse_log_file at line                   
                    187               pylint_plugin.py:100                         
                               DEBUG    - remove_failed_videos at                  
                    line 224         pylint_plugin.py:100                          
                               DEBUG    - clean_window_cache at                    
                    line 268           pylint_plugin.py:100                        
                               DEBUG    - clean_specific_window at                 
                    line 315        pylint_plugin.py:100                           
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    reset_stats          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    extract_features     pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    compute_stats        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    compute_fvd          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    update               pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    compute              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    compute_sync_score   pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    extract_lip_features pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        extract_audio_features                     
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        compute_keypoint_confidence                
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        compute_keypoint_variance                  
                               DEBUG    Skipping class method:                     
                    detect_keypoints     pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    reset_metrics        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    evaluate_batch       pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    compute_metrics      pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    evaluate_model       pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    compare_models       pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    run_ablation_study at                                          
                                        line 290                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    run_ablation_study(model: nn.Module,                           
                                        test_loader: DataLoader,                   
                    config_variants:                                               
                                        List[Dict], evaluator:                     
                    OmniHumanEvaluator)                                            
                                        -> Dict:                                   
                                            """Run ablation study                  
                    with different                                                 
                                        model configurations."""                   
                                            results = {}                           
                                            for variant in                         
                    config_variants:                                               
                                                print(f"\nTesting                  
                    configuration:                                                 
                                        {variant['name']}")                        
                                                model.load_state_di                
                    ct(torch.load(va                                               
                                        riant['checkpoint']))                      
                                                evaluator.reset_met                
                    rics()                                                         
                                                metrics =                          
                                        evaluator.evaluate_model(mo                
                    del,                                                           
                                        test_loader)                               
                                                results[variant['na                
                    me']] = metrics                                                
                                            if evaluator.save_dir:                 
                                                with                               
                    open(evaluator.save_dir /                                      
                                        'ablation_study.json', 'w')                
                    as f:                                                          
                                                    json.dump(resul                
                    ts, f, indent=2)                                               
                                            return results                         
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    run_ablation_study(model: nn.Module,                           
                                        test_loader: DataLoader,                   
                    config_variants:                                               
                                        List[Dict], evaluator:                     
                    OmniHumanEvaluator)                                            
                                        -> Dict:                                   
                                        results = {}                               
                                        for variant in                             
                    config_variants:                                               
                                        print(f"\nTesting                          
                    configuration:                                                 
                                        {variant['name']}")                        
                                        model.load_state_dict(torch                
                    .load(variant['c                                               
                                        heckpoint']))                              
                                        evaluator.reset_metrics()                  
                                        metrics =                                  
                    evaluator.evaluate_model(model,                                
                                        test_loader)                               
                                        results[variant['name']] =                 
                    metrics                                                        
                                        if evaluator.save_dir:                     
                                        with                                       
                    open(evaluator.save_dir /                                      
                                        'ablation_study.json', 'w')                
                    as f:                                                          
                                        json.dump(results, f,                      
                    indent=2)                                                      
                                        return results                             
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    - parse_log_file at line                   
                    187               pylint_plugin.py:100                         
                               DEBUG    - remove_failed_videos at                  
                    line 224         pylint_plugin.py:100                          
                               DEBUG    - clean_window_cache at                    
                    line 268           pylint_plugin.py:100                        
                               DEBUG    - clean_specific_window at                 
                    line 315        pylint_plugin.py:100                           
                               DEBUG    - run_ablation_study at                    
                    line 290           pylint_plugin.py:100                        
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    normalize_code       pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    visit_functiondef    pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    leave_module         pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function: register                
                    at line 102                                                    
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def register(linter:                       
                    PyLinter) -> None:                                             
                                            """Register the checker                
                    with pylint."""                                                
                                            linter.register_checker                
                    (DuplicateCodeCh                                               
                                        ecker(linter))                             
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def register(linter:                       
                    PyLinter) -> None:                                             
                                        linter.register_checker(Dup                
                    licateCodeChecke                                               
                                        r(linter))                                 
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    - parse_log_file at line                   
                    187               pylint_plugin.py:100                         
                               DEBUG    - remove_failed_videos at                  
                    line 224         pylint_plugin.py:100                          
                               DEBUG    - clean_window_cache at                    
                    line 268           pylint_plugin.py:100                        
                               DEBUG    - clean_specific_window at                 
                    line 315        pylint_plugin.py:100                           
                               DEBUG    - run_ablation_study at                    
                    line 290           pylint_plugin.py:100                        
                               DEBUG    - register at line 102                     
                    pylint_plugin.py:100                                           
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    encode               pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    decode               pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    reparameterize       pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    process_audio        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    process_pose         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    process_reference    pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    - parse_log_file at line                   
                    187               pylint_plugin.py:100                         
                               DEBUG    - remove_failed_videos at                  
                    line 224         pylint_plugin.py:100                          
                               DEBUG    - clean_window_cache at                    
                    line 268           pylint_plugin.py:100                        
                               DEBUG    - clean_specific_window at                 
                    line 315        pylint_plugin.py:100                           
                               DEBUG    - run_ablation_study at                    
                    line 290           pylint_plugin.py:100                        
                               DEBUG    - register at line 102                     
                    pylint_plugin.py:100                                           
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    apply_temporal_crop  pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    apply_temporal_mask  pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    apply_color_jitter   pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    apply_gaussian_blur  pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __call__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    log_metrics          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    log_samples          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _sample_video_frames pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _create_video_grid   pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    load_video           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    adjust_fps           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    interpolate_frames   pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    setup_video_training at                                        
                                        line 346                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    setup_video_training(config:                                   
                                        'APTConfig', training_loop:                
                                        'APTTrainingLoop') ->                      
                    'APTTrainingLoop':                                             
                                            """Setup video-specific                
                    training                                                       
                                        components."""                             
                                            video_aug =                            
                                        VideoAugmentation(temporal_                
                    crop_prob=0.5,                                                 
                                        temporal_mask_prob=0.3)                    
                                            temporal_loss =                        
                                        TemporalConsistencyLoss(wei                
                    ght=0.5)                                                       
                                            monitor =                              
                    APTTrainingMonitor(config)                                     
                                            training_loop.video_aug                
                    = video_aug                                                    
                                            training_loop.temporal_                
                    loss =                                                         
                                        temporal_loss                              
                                            training_loop.monitor =                
                    monitor                                                        
                                            return training_loop                   
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    setup_video_training(config:                                   
                                        'APTConfig', training_loop:                
                                        'APTTrainingLoop') ->                      
                    'APTTrainingLoop':                                             
                                        video_aug =                                
                                        VideoAugmentation(temporal_                
                    crop_prob=0.5,                                                 
                                        temporal_mask_prob=0.3)                    
                                        temporal_loss =                            
                                        TemporalConsistencyLoss(wei                
                    ght=0.5)                                                       
                                        monitor =                                  
                    APTTrainingMonitor(config)                                     
                                        training_loop.video_aug =                  
                    video_aug                                                      
                                        training_loop.temporal_loss                
                    = temporal_loss                                                
                                        training_loop.monitor =                    
                    monitor                                                        
                                        return training_loop                       
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    - parse_log_file at line                   
                    187               pylint_plugin.py:100                         
                               DEBUG    - remove_failed_videos at                  
                    line 224         pylint_plugin.py:100                          
                               DEBUG    - clean_window_cache at                    
                    line 268           pylint_plugin.py:100                        
                               DEBUG    - clean_specific_window at                 
                    line 315        pylint_plugin.py:100                           
                               DEBUG    - run_ablation_study at                    
                    line 290           pylint_plugin.py:100                        
                               DEBUG    - register at line 102                     
                    pylint_plugin.py:100                                           
                               DEBUG    - setup_video_training at                  
                    line 346         pylint_plugin.py:100                          
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function: modulate                
                    at line 66                                                     
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def modulate(x, shift,                     
                    scale):                                                        
                                            if shift is None:                      
                                                shift =                            
                    torch.zeros_like(scale)                                        
                                            return x * (1 +                        
                    scale.unsqueeze(1)) +                                          
                                        shift.unsqueeze(1)                         
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def modulate(x, shift,                     
                    scale):                                                        
                                        if shift is None:                          
                                        shift =                                    
                    torch.zeros_like(scale)                                        
                                        return x * (1 +                            
                    scale.unsqueeze(1)) +                                          
                                        shift.unsqueeze(1)                         
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    get_2d_sincos_pos_embed                                        
                                        at line 77                                 
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    get_2d_sincos_pos_embed(embed_dim,                             
                                        grid_size, cls_token=False,                
                    extra_tokens=0,                                                
                                        scaling_factor=None,                       
                    offset=None):                                                  
                                            """                                    
                                            grid_size: int of the                  
                    grid height and                                                
                                        width                                      
                                            return:                                
                                            pos_embed:  or                         
                    [1+grid_size*grid_size,                                        
                                        embed_dim] (w/ or w/o                      
                    cls_token)                                                     
                                            """                                    
                                            grid_h =                               
                    np.arange(grid_size,                                           
                                        dtype=np.float32)                          
                                            grid_w =                               
                    np.arange(grid_size,                                           
                                        dtype=np.float32)                          
                                            grid =                                 
                    np.meshgrid(grid_w, grid_h)                                    
                                            grid = np.stack(grid,                  
                    axis=0)                                                        
                                            if scaling_factor is                   
                    not None:                                                      
                                                grid = grid /                      
                    scaling_factor                                                 
                                            if offset is not None:                 
                                                grid = grid -                      
                    offset                                                         
                                            grid = grid.reshape([2,                
                    1, grid_size,                                                  
                                        grid_size])                                
                                            pos_embed =                            
                                        get_2d_sincos_pos_embed_fro                
                    m_grid(embed_dim                                               
                                        , grid)                                    
                                            if cls_token and                       
                    extra_tokens > 0:                                              
                                                pos_embed =                        
                                        np.concatenate(,                           
                                        axis=0)                                    
                                            return pos_embed                       
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    get_2d_sincos_pos_embed(embed_dim,                             
                                        grid_size, cls_token=False,                
                    extra_tokens=0,                                                
                                        scaling_factor=None,                       
                    offset=None):                                                  
                                        grid_h =                                   
                    np.arange(grid_size,                                           
                                        dtype=np.float32)                          
                                        grid_w =                                   
                    np.arange(grid_size,                                           
                                        dtype=np.float32)                          
                                        grid = np.meshgrid(grid_w,                 
                    grid_h)                                                        
                                        grid = np.stack(grid,                      
                    axis=0)                                                        
                                        if scaling_factor is not                   
                    None:                                                          
                                        grid = grid /                              
                    scaling_factor                                                 
                                        if offset is not None:                     
                                        grid = grid - offset                       
                                        grid = grid.reshape([2, 1,                 
                    grid_size,                                                     
                                        grid_size])                                
                                        pos_embed =                                
                                        get_2d_sincos_pos_embed_fro                
                    m_grid(embed_dim                                               
                                        , grid)                                    
                                        if cls_token and                           
                    extra_tokens > 0:                                              
                                        pos_embed =                                
                    np.concatenate(, axis=0)                                       
                                        return pos_embed                           
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                                        get_2d_sincos_pos_embed_fro                
                    m_grid at line                                                 
                                        107                                        
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                                        get_2d_sincos_pos_embed_fro                
                    m_grid(embed_dim                                               
                                        , grid):                                   
                                            assert embed_dim % 2 ==                
                    0                                                              
                                            emb_h =                                
                                        get_1d_sincos_pos_embed_fro                
                    m_grid(embed_dim                                               
                                        // 2, grid[0])                             
                                            emb_w =                                
                                        get_1d_sincos_pos_embed_fro                
                    m_grid(embed_dim                                               
                                        // 2, grid[1])                             
                                            emb = np.concatenate(,                 
                    axis=1)                                                        
                                            return emb                             
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                                        get_2d_sincos_pos_embed_fro                
                    m_grid(embed_dim                                               
                                        , grid):                                   
                                        assert embed_dim % 2 == 0                  
                                        emb_h =                                    
                                        get_1d_sincos_pos_embed_fro                
                    m_grid(embed_dim                                               
                                        // 2, grid[0])                             
                                        emb_w =                                    
                                        get_1d_sincos_pos_embed_fro                
                    m_grid(embed_dim                                               
                                        // 2, grid[1])                             
                                        emb = np.concatenate(,                     
                    axis=1)                                                        
                                        return emb                                 
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                                        get_1d_sincos_pos_embed_fro                
                    m_grid at line                                                 
                                        116                                        
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                                        get_1d_sincos_pos_embed_fro                
                    m_grid(embed_dim                                               
                                        , pos):                                    
                                            """                                    
                                            embed_dim: output                      
                    dimension for each                                             
                                        position                                   
                                            pos: a list of                         
                    positions to be encoded:                                       
                                        size (M,)                                  
                                            out: (M, D)                            
                                            """                                    
                                            assert embed_dim % 2 ==                
                    0                                                              
                                            omega =                                
                    np.arange(embed_dim // 2,                                      
                                        dtype=np.float64)                          
                                            omega /= embed_dim /                   
                    2.0                                                            
                                            omega = 1.0 /                          
                    10000**omega                                                   
                                            pos = pos.reshape(-1)                  
                                            out =                                  
                    np.einsum('m,d->md', pos, omega)                               
                                            emb_sin = np.sin(out)                  
                                            emb_cos = np.cos(out)                  
                                            return np.concatenate(,                
                    axis=1)                                                        
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                                        get_1d_sincos_pos_embed_fro                
                    m_grid(embed_dim                                               
                                        , pos):                                    
                                        assert embed_dim % 2 == 0                  
                                        omega = np.arange(embed_dim                
                    // 2,                                                          
                                        dtype=np.float64)                          
                                        omega /= embed_dim / 2.0                   
                                        omega = 1.0 / 10000**omega                 
                                        pos = pos.reshape(-1)                      
                                        out = np.einsum('m,d->md',                 
                    pos, omega)                                                    
                                        emb_sin = np.sin(out)                      
                                        emb_cos = np.cos(out)                      
                                        return np.concatenate(,                    
                    axis=1)                                                        
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    timestep_embedding   pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    split_qkv at line 210                                          
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def split_qkv(qkv,                         
                    head_dim):                                                     
                                            qkv =                                  
                    qkv.reshape(qkv.shape[0],                                      
                                        qkv.shape[1], 3, -1,                       
                    head_dim).movedim(2,                                           
                                        0)                                         
                                            return qkv[0], qkv[1],                 
                    qkv[2]                                                         
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def split_qkv(qkv,                         
                    head_dim):                                                     
                                        qkv =                                      
                    qkv.reshape(qkv.shape[0],                                      
                                        qkv.shape[1], 3, -1,                       
                    head_dim).movedim(2,                                           
                                        0)                                         
                                        return qkv[0], qkv[1],                     
                    qkv[2]                                                         
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    optimized_attention at                                         
                                        line 215                                   
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def                                        
                    optimized_attention(qkv, num_heads):                           
                                            return                                 
                    attention(qkv[0], qkv[1],                                      
                                        qkv[2], num_heads)                         
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def                                        
                    optimized_attention(qkv, num_heads):                           
                                        return attention(qkv[0],                   
                    qkv[1], qkv[2],                                                
                                        num_heads)                                 
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pre_attention        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    post_attention       pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _norm                pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pre_attention        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    post_attention       pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pre_attention_x      pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    post_attention_x     pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    block_mixing at line 591                                       
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def block_mixing(context,                  
                    x, context_block,                                              
                                        x_block, c):                               
                                            assert context is not                  
                    None,                                                          
                                        'block_mixing called with                  
                    None context'                                                  
                                            (context_qkv,                          
                    context_intermediates) =                                       
                                        context_block.pre_attention                
                    (context, c)                                                   
                                            if                                     
                    x_block.x_block_self_attn:                                     
                                                (x_qkv, x_qkv2,                    
                    x_intermediates) =                                             
                                        x_block.pre_attention_x(x,                 
                    c)                                                             
                                            else:                                  
                                                (x_qkv,                            
                    x_intermediates) =                                             
                                        x_block.pre_attention(x, c)                
                                            (q, k, v) =                            
                    tuple((torch.cat(tuple((qkv                                    
                                        for qkv in )), dim=1) for i                
                    in range(3)))                                                  
                                            attn = attention(q, k,                 
                    v,                                                             
                                        x_block.attn.num_heads)                    
                                            (context_attn, x_attn)                 
                    = (attn[:,                                                     
                                        :context_qkv[0].shape[1]],                 
                    attn[:,                                                        
                                        context_qkv[0].shape[1]:])                 
                                            if not                                 
                    context_block.pre_only:                                        
                                                context =                          
                                        context_block.post_attentio                
                    n(context_attn,                                                
                                        *context_intermediates)                    
                                            else:                                  
                                                context = None                     
                                            if                                     
                    x_block.x_block_self_attn:                                     
                                                (x_q2, x_k2, x_v2)                 
                    = x_qkv2                                                       
                                                attn2 =                            
                    attention(x_q2, x_k2, x_v2,                                    
                                        x_block.attn2.num_heads)                   
                                                x =                                
                                        x_block.post_attention_x(x_                
                    attn, attn2,                                                   
                                        *x_intermediates)                          
                                            else:                                  
                                                x =                                
                    x_block.post_attention(x_attn,                                 
                                        *x_intermediates)                          
                                            return context, x                      
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def block_mixing(context,                  
                    x, context_block,                                              
                                        x_block, c):                               
                                        assert context is not None,                
                    'block_mixing                                                  
                                        called with None context'                  
                                        (context_qkv,                              
                    context_intermediates) =                                       
                                        context_block.pre_attention                
                    (context, c)                                                   
                                        if                                         
                    x_block.x_block_self_attn:                                     
                                        (x_qkv, x_qkv2,                            
                    x_intermediates) =                                             
                                        x_block.pre_attention_x(x,                 
                    c)                                                             
                                        else:                                      
                                        (x_qkv, x_intermediates) =                 
                                        x_block.pre_attention(x, c)                
                                        (q, k, v) =                                
                    tuple((torch.cat(tuple((qkv for                                
                                        qkv in )), dim=1) for i in                 
                    range(3)))                                                     
                                        attn = attention(q, k, v,                  
                                        x_block.attn.num_heads)                    
                                        (context_attn, x_attn) =                   
                    (attn[:,                                                       
                                        :context_qkv[0].shape[1]],                 
                    attn[:,                                                        
                                        context_qkv[0].shape[1]:])                 
                                        if not                                     
                    context_block.pre_only:                                        
                                        context =                                  
                                        context_block.post_attentio                
                    n(context_attn,                                                
                                        *context_intermediates)                    
                                        else:                                      
                                        context = None                             
                                        if                                         
                    x_block.x_block_self_attn:                                     
                                        (x_q2, x_k2, x_v2) = x_qkv2                
                                        attn2 = attention(x_q2,                    
                    x_k2, x_v2,                                                    
                                        x_block.attn2.num_heads)                   
                                        x =                                        
                    x_block.post_attention_x(x_attn, attn2,                        
                                        *x_intermediates)                          
                                        else:                                      
                                        x =                                        
                    x_block.post_attention(x_attn,                                 
                                        *x_intermediates)                          
                                        return context, x                          
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    cropped_pos_embed    pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    unpatchify           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        forward_core_with_concat                   
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    - parse_log_file at line                   
                    187               pylint_plugin.py:100                         
                               DEBUG    - remove_failed_videos at                  
                    line 224         pylint_plugin.py:100                          
                               DEBUG    - clean_window_cache at                    
                    line 268           pylint_plugin.py:100                        
                               DEBUG    - clean_specific_window at                 
                    line 315        pylint_plugin.py:100                           
                               DEBUG    - run_ablation_study at                    
                    line 290           pylint_plugin.py:100                        
                               DEBUG    - register at line 102                     
                    pylint_plugin.py:100                                           
                               DEBUG    - setup_video_training at                  
                    line 346         pylint_plugin.py:100                          
                               DEBUG    - modulate at line 66                      
                    pylint_plugin.py:100                                           
                               DEBUG    - get_2d_sincos_pos_embed                  
                    at line 77       pylint_plugin.py:100                          
                               DEBUG    -                                          
                    get_2d_sincos_pos_embed_from_grid at                           
                    pylint_plugin.py:100                                           
                                        line 107                                   
                               DEBUG    -                                          
                    get_1d_sincos_pos_embed_from_grid at                           
                    pylint_plugin.py:100                                           
                                        line 116                                   
                               DEBUG    - split_qkv at line 210                    
                    pylint_plugin.py:100                                           
                               DEBUG    - optimized_attention at                   
                    line 215          pylint_plugin.py:100                         
                               DEBUG    - block_mixing at line 591                 
                    pylint_plugin.py:100                                           
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _load_annotations    pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _filter_data         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _load_frames         pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _load_audio          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _extract_keypoints   pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _generate_heatmap    pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    _load_pose           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __len__              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __getitem__          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __del__              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    setup_distributed    pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    setup_optimizers     pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    setup_logging        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    flow_matching_loss   pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    add_noise            pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    training_step        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    train_stage          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    save_checkpoint      pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    train                pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    - parse_log_file at line                   
                    187               pylint_plugin.py:100                         
                               DEBUG    - remove_failed_videos at                  
                    line 224         pylint_plugin.py:100                          
                               DEBUG    - clean_window_cache at                    
                    line 268           pylint_plugin.py:100                        
                               DEBUG    - clean_specific_window at                 
                    line 315        pylint_plugin.py:100                           
                               DEBUG    - run_ablation_study at                    
                    line 290           pylint_plugin.py:100                        
                               DEBUG    - register at line 102                     
                    pylint_plugin.py:100                                           
                               DEBUG    - setup_video_training at                  
                    line 346         pylint_plugin.py:100                          
                               DEBUG    - modulate at line 66                      
                    pylint_plugin.py:100                                           
                               DEBUG    - get_2d_sincos_pos_embed                  
                    at line 77       pylint_plugin.py:100                          
                               DEBUG    -                                          
                    get_2d_sincos_pos_embed_from_grid at                           
                    pylint_plugin.py:100                                           
                                        line 107                                   
                               DEBUG    -                                          
                    get_1d_sincos_pos_embed_from_grid at                           
                    pylint_plugin.py:100                                           
                                        line 116                                   
                               DEBUG    - split_qkv at line 210                    
                    pylint_plugin.py:100                                           
                               DEBUG    - optimized_attention at                   
                    line 215          pylint_plugin.py:100                         
                               DEBUG    - block_mixing at line 591                 
                    pylint_plugin.py:100                                           
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    sigma_min            pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    sigma_max            pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    timestep             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    sigma                pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    calculate_denoised   pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    noise_scaling        pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    apply_model          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    get_dtype            pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    process_in           pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    process_out          pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    pylint_plugin.py:61                                            
                                        decode_latent_to_preview                   
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    append_dims at line 324                                        
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def append_dims(x,                         
                    target_dims):                                                  
                                            """Appends dimensions                  
                    to the end of a                                                
                                        tensor until it has                        
                    target_dims                                                    
                                        dimensions."""                             
                                            dims_to_append =                       
                    target_dims - x.ndim                                           
                                            return x[(..., ) +                     
                    (None, ) *                                                     
                                        dims_to_append]                            
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def append_dims(x,                         
                    target_dims):                                                  
                                        dims_to_append =                           
                    target_dims - x.ndim                                           
                                        return x[(..., ) + (None, )                
                    *                                                              
                                        dims_to_append]                            
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function: to_d at                 
                    line 330                                                       
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def to_d(x, sigma,                         
                    denoised):                                                     
                                            """Converts a denoiser                 
                    output to a                                                    
                                        Karras ODE derivative."""                  
                                            return (x - denoised) /                
                                        append_dims(sigma, x.ndim)                 
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def to_d(x, sigma,                         
                    denoised):                                                     
                                        return (x - denoised) /                    
                    append_dims(sigma,                                             
                                        x.ndim)                                    
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    sample_euler at line 335                                       
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        @torch.no_grad()                           
                                        @torch.autocast('cuda',                    
                                        dtype=torch.float16)                       
                                        def sample_euler(model, x,                 
                    sigmas,                                                        
                                        extra_args=None):                          
                                            """Implements Algorithm                
                    2 (Euler steps)                                                
                                        from Karras et al.                         
                    (2022)."""                                                     
                                            extra_args = {} if                     
                    extra_args is None                                             
                                        else extra_args                            
                                            s_in =                                 
                    x.new_ones([x.shape[0]])                                       
                                            for i in                               
                    tqdm(range(len(sigmas) - 1)):                                  
                                                sigma_hat = sigmas                 
                                                denoised = model(x,                
                    sigma_hat *                                                    
                                        s_in, **extra_args)                        
                                                d = to_d(x,                        
                    sigma_hat, denoised)                                           
                                                dt = sigmas -                      
                    sigma_hat                                                      
                                                x = x + d * dt                     
                                            return x                               
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        @torch.no_grad()                           
                                        @torch.autocast('cuda',                    
                                        dtype=torch.float16)                       
                                        def sample_euler(model, x,                 
                    sigmas,                                                        
                                        extra_args=None):                          
                                        extra_args = {} if                         
                    extra_args is None else                                        
                                        extra_args                                 
                                        s_in =                                     
                    x.new_ones([x.shape[0]])                                       
                                        for i in                                   
                    tqdm(range(len(sigmas) - 1)):                                  
                                        sigma_hat = sigmas                         
                                        denoised = model(x,                        
                    sigma_hat * s_in,                                              
                                        **extra_args)                              
                                        d = to_d(x, sigma_hat,                     
                    denoised)                                                      
                                        dt = sigmas - sigma_hat                    
                                        x = x + d * dt                             
                                        return x                                   
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    sample_dpmpp_2m at line                                        
                                        351                                        
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        @torch.no_grad()                           
                                        @torch.autocast('cuda',                    
                                        dtype=torch.float16)                       
                                        def sample_dpmpp_2m(model,                 
                    x, sigmas,                                                     
                                        extra_args=None):                          
                                            """DPM-Solver++(2M)."""                
                                            extra_args = {} if                     
                    extra_args is None                                             
                                        else extra_args                            
                                            s_in =                                 
                    x.new_ones([x.shape[0]])                                       
                                            sigma_fn = lambda t:                   
                    t.neg().exp()                                                  
                                            t_fn = lambda sigma:                   
                    sigma.log().neg()                                              
                                            old_denoised = None                    
                                            for i in                               
                    tqdm(range(len(sigmas) - 1)):                                  
                                                denoised = model(x,                
                    sigmas * s_in,                                                 
                                        **extra_args)                              
                                                (t, t_next) =                      
                    (t_fn(sigmas),                                                 
                                        t_fn(sigmas))                              
                                                h = t_next - t                     
                                                if old_denoised is                 
                    None or sigmas                                                 
                                        == 0:                                      
                                                    x =                            
                    sigma_fn(t_next) /                                             
                                        sigma_fn(t) * x -                          
                    (-h).expm1() * denoised                                        
                                                else:                              
                                                    h_last = t -                   
                    t_fn(sigmas)                                                   
                                                    r = h_last / h                 
                                                    denoised_d = (1                
                    + 1 / (2 * r))                                                 
                                        * denoised - 1 / (2 * r) *                 
                    old_denoised                                                   
                                                    x =                            
                    sigma_fn(t_next) /                                             
                                        sigma_fn(t) * x -                          
                    (-h).expm1() * denoised_d                                      
                                                old_denoised =                     
                    denoised                                                       
                                            return x                               
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        @torch.no_grad()                           
                                        @torch.autocast('cuda',                    
                                        dtype=torch.float16)                       
                                        def sample_dpmpp_2m(model,                 
                    x, sigmas,                                                     
                                        extra_args=None):                          
                                        extra_args = {} if                         
                    extra_args is None else                                        
                                        extra_args                                 
                                        s_in =                                     
                    x.new_ones([x.shape[0]])                                       
                                        sigma_fn = lambda t:                       
                    t.neg().exp()                                                  
                                        t_fn = lambda sigma:                       
                    sigma.log().neg()                                              
                                        old_denoised = None                        
                                        for i in                                   
                    tqdm(range(len(sigmas) - 1)):                                  
                                        denoised = model(x, sigmas                 
                    * s_in,                                                        
                                        **extra_args)                              
                                        (t, t_next) =                              
                    (t_fn(sigmas), t_fn(sigmas))                                   
                                        h = t_next - t                             
                                        if old_denoised is None or                 
                    sigmas == 0:                                                   
                                        x = sigma_fn(t_next) /                     
                    sigma_fn(t) * x -                                              
                                        (-h).expm1() * denoised                    
                                        else:                                      
                                        h_last = t - t_fn(sigmas)                  
                                        r = h_last / h                             
                                        denoised_d = (1 + 1 / (2 *                 
                    r)) * denoised -                                               
                                        1 / (2 * r) * old_denoised                 
                                        x = sigma_fn(t_next) /                     
                    sigma_fn(t) * x -                                              
                                        (-h).expm1() * denoised_d                  
                                        old_denoised = denoised                    
                                        return x                                   
                               DEBUG                                               
                    pylint_plugin.py:64                                            
                                        Checking function:                         
                    Normalize at line 380                                          
                               DEBUG    Original body:                             
                    pylint_plugin.py:68                                            
                                                                                   
                                        def Normalize(in_channels,                 
                    num_groups=32,                                                 
                                        dtype=torch.float32,                       
                    device=None):                                                  
                                            return                                 
                                        torch.nn.GroupNorm(num_grou                
                    ps=num_groups,                                                 
                                        num_channels=in_channels,                  
                    eps=1e-06,                                                     
                                        affine=True, dtype=dtype,                  
                    device=device)                                                 
                               DEBUG    Normalized body:                           
                    pylint_plugin.py:69                                            
                                        def Normalize(in_channels,                 
                    num_groups=32,                                                 
                                        dtype=torch.float32,                       
                    device=None):                                                  
                                        return                                     
                                        torch.nn.GroupNorm(num_grou                
                    ps=num_groups,                                                 
                                        num_channels=in_channels,                  
                    eps=1e-06,                                                     
                                        affine=True, dtype=dtype,                  
                    device=device)                                                 
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    forward              pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    __init__             pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    decode               pylint_plugin.py:61                       
                               DEBUG    Skipping class method:                     
                    encode               pylint_plugin.py:61                       
                               DEBUG                                               
                    pylint_plugin.py:98                                            
                                        Function summary:                          
                               DEBUG    - load_into at line 36                     
                    pylint_plugin.py:100                                           
                               DEBUG    - main at line 550                         
                    pylint_plugin.py:100                                           
                               DEBUG    - initialize_models at line                
                    400            pylint_plugin.py:100                            
                               DEBUG    - train_apt at line 412                    
                    pylint_plugin.py:100                                           
                               DEBUG    - load_sd35_weights at line                
                    486            pylint_plugin.py:100                            
                               DEBUG    - load_sd35_weights at line                
                    541            pylint_plugin.py:100                            
                               DEBUG    - main at line 794                         
                    pylint_plugin.py:100                                           
                               DEBUG    - attention at line 17                     
                    pylint_plugin.py:100                                           
                               DEBUG    - parse_parentheses at line                
                    245            pylint_plugin.py:100                            
                               DEBUG    - token_weights at line 274                
                    pylint_plugin.py:100                                           
                               DEBUG    - escape_important at line                 
                    295             pylint_plugin.py:100                           
                               DEBUG    - unescape_important at                    
                    line 301           pylint_plugin.py:100                        
                               DEBUG    - parse_log_file at line                   
                    187               pylint_plugin.py:100                         
                               DEBUG    - remove_failed_videos at                  
                    line 224         pylint_plugin.py:100                          
                               DEBUG    - clean_window_cache at                    
                    line 268           pylint_plugin.py:100                        
                               DEBUG    - clean_specific_window at                 
                    line 315        pylint_plugin.py:100                           
                               DEBUG    - run_ablation_study at                    
                    line 290           pylint_plugin.py:100                        
                               DEBUG    - register at line 102                     
                    pylint_plugin.py:100                                           
                               DEBUG    - setup_video_training at                  
                    line 346         pylint_plugin.py:100                          
                               DEBUG    - modulate at line 66                      
                    pylint_plugin.py:100                                           
                               DEBUG    - get_2d_sincos_pos_embed                  
                    at line 77       pylint_plugin.py:100                          
                               DEBUG    -                                          
                    get_2d_sincos_pos_embed_from_grid at                           
                    pylint_plugin.py:100                                           
                                        line 107                                   
                               DEBUG    -                                          
                    get_1d_sincos_pos_embed_from_grid at                           
                    pylint_plugin.py:100                                           
                                        line 116                                   
                               DEBUG    - split_qkv at line 210                    
                    pylint_plugin.py:100                                           
                               DEBUG    - optimized_attention at                   
                    line 215          pylint_plugin.py:100                         
                               DEBUG    - block_mixing at line 591                 
                    pylint_plugin.py:100                                           
                               DEBUG    - append_dims at line 324                  
                    pylint_plugin.py:100                                           
                               DEBUG    - to_d at line 330                         
                    pylint_plugin.py:100                                           
                               DEBUG    - sample_euler at line 335                 
                    pylint_plugin.py:100                                           
                               DEBUG    - sample_dpmpp_2m at line                  
                    351              pylint_plugin.py:100                          
                               DEBUG    - Normalize at line 380                    
                    pylint_plugin.py:100                                           
                                                                                   
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __len__              pylint_plugin.py:61
           DEBUG    Skipping class method: __getitem__          pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __len__              pylint_plugin.py:61
           DEBUG    Skipping class method: __getitem__          pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: apply_temporal_crop  pylint_plugin.py:61
           DEBUG    Skipping class method: apply_temporal_mask  pylint_plugin.py:61
           DEBUG    Skipping class method: apply_color_jitter   pylint_plugin.py:61
           DEBUG    Skipping class method: apply_gaussian_blur  pylint_plugin.py:61
           DEBUG    Skipping class method: __call__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: log_metrics          pylint_plugin.py:61
           DEBUG    Skipping class method: log_samples          pylint_plugin.py:61
           DEBUG    Skipping class method: _sample_video_frames pylint_plugin.py:61
           DEBUG    Skipping class method: _create_video_grid   pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: load_video           pylint_plugin.py:61
           DEBUG    Skipping class method: adjust_fps           pylint_plugin.py:61
           DEBUG    Skipping class method: interpolate_frames   pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: setup_video_training at                     
                    line 346                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def setup_video_training(config:                               
                    'APTConfig', training_loop:                                    
                    'APTTrainingLoop') -> 'APTTrainingLoop':                       
                        """Setup video-specific training                           
                    components."""                                                 
                        video_aug =                                                
                    VideoAugmentation(temporal_crop_prob=0.5,                      
                    temporal_mask_prob=0.3)                                        
                        temporal_loss =                                            
                    TemporalConsistencyLoss(weight=0.5)                            
                        monitor = APTTrainingMonitor(config)                       
                        training_loop.video_aug = video_aug                        
                        training_loop.temporal_loss =                              
                    temporal_loss                                                  
                        training_loop.monitor = monitor                            
                        return training_loop                                       
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def setup_video_training(config:                               
                    'APTConfig', training_loop:                                    
                    'APTTrainingLoop') -> 'APTTrainingLoop':                       
                    video_aug =                                                    
                    VideoAugmentation(temporal_crop_prob=0.5,                      
                    temporal_mask_prob=0.3)                                        
                    temporal_loss =                                                
                    TemporalConsistencyLoss(weight=0.5)                            
                    monitor = APTTrainingMonitor(config)                           
                    training_loop.video_aug = video_aug                            
                    training_loop.temporal_loss = temporal_loss                    
                    training_loop.monitor = monitor                                
                    return training_loop                                           
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: debug_tensor         pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    debug_model_gradients                                          
           DEBUG    Skipping class method: debug_backward_graph pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    _print_backward_graph                                          
           DEBUG    Skipping class method: debug_model          pylint_plugin.py:61
           DEBUG    Skipping class method: __enter__            pylint_plugin.py:61
           DEBUG    Skipping class method: __exit__             pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    attach_gradient_hooks                                          
           DEBUG    Skipping class method: grad_hook            pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: modulate at line 66                         
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def modulate(x, shift, scale):                                 
                        if shift is None:                                          
                            shift = torch.zeros_like(scale)                        
                        return x * (1 + scale.unsqueeze(1)) +                      
                    shift.unsqueeze(1)                                             
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def modulate(x, shift, scale):                                 
                    if shift is None:                                              
                    shift = torch.zeros_like(scale)                                
                    return x * (1 + scale.unsqueeze(1)) +                          
                    shift.unsqueeze(1)                                             
           DEBUG                                                pylint_plugin.py:64
                    Checking function: get_2d_sincos_pos_embed                     
                    at line 77                                                     
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def get_2d_sincos_pos_embed(embed_dim,                         
                    grid_size, cls_token=False, extra_tokens=0,                    
                    scaling_factor=None, offset=None):                             
                        """                                                        
                        grid_size: int of the grid height and                      
                    width                                                          
                        return:                                                    
                        pos_embed:  or [1+grid_size*grid_size,                     
                    embed_dim] (w/ or w/o cls_token)                               
                        """                                                        
                        grid_h = np.arange(grid_size,                              
                    dtype=np.float32)                                              
                        grid_w = np.arange(grid_size,                              
                    dtype=np.float32)                                              
                        grid = np.meshgrid(grid_w, grid_h)                         
                        grid = np.stack(grid, axis=0)                              
                        if scaling_factor is not None:                             
                            grid = grid / scaling_factor                           
                        if offset is not None:                                     
                            grid = grid - offset                                   
                        grid = grid.reshape([2, 1, grid_size,                      
                    grid_size])                                                    
                        pos_embed =                                                
                    get_2d_sincos_pos_embed_from_grid(embed_dim                    
                    , grid)                                                        
                        if cls_token and extra_tokens > 0:                         
                            pos_embed =                                            
                    np.concatenate([np.zeros(), pos_embed],                        
                    axis=0)                                                        
                        return pos_embed                                           
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def get_2d_sincos_pos_embed(embed_dim,                         
                    grid_size, cls_token=False, extra_tokens=0,                    
                    scaling_factor=None, offset=None):                             
                    grid_h = np.arange(grid_size,                                  
                    dtype=np.float32)                                              
                    grid_w = np.arange(grid_size,                                  
                    dtype=np.float32)                                              
                    grid = np.meshgrid(grid_w, grid_h)                             
                    grid = np.stack(grid, axis=0)                                  
                    if scaling_factor is not None:                                 
                    grid = grid / scaling_factor                                   
                    if offset is not None:                                         
                    grid = grid - offset                                           
                    grid = grid.reshape([2, 1, grid_size,                          
                    grid_size])                                                    
                    pos_embed =                                                    
                    get_2d_sincos_pos_embed_from_grid(embed_dim                    
                    , grid)                                                        
                    if cls_token and extra_tokens > 0:                             
                    pos_embed = np.concatenate([np.zeros(),                        
                    pos_embed], axis=0)                                            
                    return pos_embed                                               
           DEBUG                                                pylint_plugin.py:64
                    Checking function:                                             
                    get_2d_sincos_pos_embed_from_grid at line                      
                    107                                                            
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def                                                            
                    get_2d_sincos_pos_embed_from_grid(embed_dim                    
                    , grid):                                                       
                        assert embed_dim % 2 == 0                                  
                        emb_h =                                                    
                    get_1d_sincos_pos_embed_from_grid(embed_dim                    
                    // 2, grid[0])                                                 
                        emb_w =                                                    
                    get_1d_sincos_pos_embed_from_grid(embed_dim                    
                    // 2, grid[1])                                                 
                        emb = np.concatenate(, axis=1)                             
                        return emb                                                 
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def                                                            
                    get_2d_sincos_pos_embed_from_grid(embed_dim                    
                    , grid):                                                       
                    assert embed_dim % 2 == 0                                      
                    emb_h =                                                        
                    get_1d_sincos_pos_embed_from_grid(embed_dim                    
                    // 2, grid[0])                                                 
                    emb_w =                                                        
                    get_1d_sincos_pos_embed_from_grid(embed_dim                    
                    // 2, grid[1])                                                 
                    emb = np.concatenate(, axis=1)                                 
                    return emb                                                     
           DEBUG                                                pylint_plugin.py:64
                    Checking function:                                             
                    get_1d_sincos_pos_embed_from_grid at line                      
                    116                                                            
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def                                                            
                    get_1d_sincos_pos_embed_from_grid(embed_dim                    
                    , pos):                                                        
                        """                                                        
                        embed_dim: output dimension for each                       
                    position                                                       
                        pos: a list of positions to be encoded:                    
                    size (M,)                                                      
                        out: (M, D)                                                
                        """                                                        
                        assert embed_dim % 2 == 0                                  
                        omega = np.arange(embed_dim // 2,                          
                    dtype=np.float64)                                              
                        omega /= embed_dim / 2.0                                   
                        omega = 1.0 / 10000**omega                                 
                        pos = pos.reshape(-1)                                      
                        out = np.einsum('m,d->md', pos, omega)                     
                        emb_sin = np.sin(out)                                      
                        emb_cos = np.cos(out)                                      
                        return np.concatenate(, axis=1)                            
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def                                                            
                    get_1d_sincos_pos_embed_from_grid(embed_dim                    
                    , pos):                                                        
                    assert embed_dim % 2 == 0                                      
                    omega = np.arange(embed_dim // 2,                              
                    dtype=np.float64)                                              
                    omega /= embed_dim / 2.0                                       
                    omega = 1.0 / 10000**omega                                     
                    pos = pos.reshape(-1)                                          
                    out = np.einsum('m,d->md', pos, omega)                         
                    emb_sin = np.sin(out)                                          
                    emb_cos = np.cos(out)                                          
                    return np.concatenate(, axis=1)                                
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: timestep_embedding   pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: split_qkv at line 210                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def split_qkv(qkv, head_dim):                                  
                        qkv = qkv.reshape(qkv.shape[0],                            
                    qkv.shape[1], 3, -1, head_dim).movedim(2,                      
                    0)                                                             
                        return qkv[0], qkv[1], qkv[2]                              
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def split_qkv(qkv, head_dim):                                  
                    qkv = qkv.reshape(qkv.shape[0],                                
                    qkv.shape[1], 3, -1, head_dim).movedim(2,                      
                    0)                                                             
                    return qkv[0], qkv[1], qkv[2]                                  
           DEBUG                                                pylint_plugin.py:64
                    Checking function: optimized_attention at                      
                    line 215                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def optimized_attention(qkv, num_heads):                       
                        return attention(qkv[0], qkv[1],                           
                    qkv[2], num_heads)                                             
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def optimized_attention(qkv, num_heads):                       
                    return attention(qkv[0], qkv[1], qkv[2],                       
                    num_heads)                                                     
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: pre_attention        pylint_plugin.py:61
           DEBUG    Skipping class method: post_attention       pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: _norm                pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: pre_attention        pylint_plugin.py:61
           DEBUG    Skipping class method: post_attention       pylint_plugin.py:61
           DEBUG    Skipping class method: pre_attention_x      pylint_plugin.py:61
           DEBUG    Skipping class method: post_attention_x     pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: block_mixing at line 591                    
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def block_mixing(context, x, context_block,                    
                    x_block, c):                                                   
                        assert context is not None,                                
                    'block_mixing called with None context'                        
                        (context_qkv, context_intermediates) =                     
                    context_block.pre_attention(context, c)                        
                        if x_block.x_block_self_attn:                              
                            (x_qkv, x_qkv2, x_intermediates) =                     
                    x_block.pre_attention_x(x, c)                                  
                        else:                                                      
                            (x_qkv, x_intermediates) =                             
                    x_block.pre_attention(x, c)                                    
                        (q, k, v) = tuple((torch.cat(tuple((qkv                    
                    for qkv in )), dim=1) for i in range(3)))                      
                        attn = attention(q, k, v,                                  
                    x_block.attn.num_heads)                                        
                        (context_attn, x_attn) = (attn[:,                          
                    :context_qkv[0].shape[1]], attn[:,                             
                    context_qkv[0].shape[1]:])                                     
                        if not context_block.pre_only:                             
                            context =                                              
                    context_block.post_attention(context_attn,                     
                    *context_intermediates)                                        
                        else:                                                      
                            context = None                                         
                        if x_block.x_block_self_attn:                              
                            (x_q2, x_k2, x_v2) = x_qkv2                            
                            attn2 = attention(x_q2, x_k2, x_v2,                    
                    x_block.attn2.num_heads)                                       
                            x =                                                    
                    x_block.post_attention_x(x_attn, attn2,                        
                    *x_intermediates)                                              
                        else:                                                      
                            x = x_block.post_attention(x_attn,                     
                    *x_intermediates)                                              
                        return context, x                                          
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def block_mixing(context, x, context_block,                    
                    x_block, c):                                                   
                    assert context is not None, 'block_mixing                      
                    called with None context'                                      
                    (context_qkv, context_intermediates) =                         
                    context_block.pre_attention(context, c)                        
                    if x_block.x_block_self_attn:                                  
                    (x_qkv, x_qkv2, x_intermediates) =                             
                    x_block.pre_attention_x(x, c)                                  
                    else:                                                          
                    (x_qkv, x_intermediates) =                                     
                    x_block.pre_attention(x, c)                                    
                    (q, k, v) = tuple((torch.cat(tuple((qkv for                    
                    qkv in )), dim=1) for i in range(3)))                          
                    attn = attention(q, k, v,                                      
                    x_block.attn.num_heads)                                        
                    (context_attn, x_attn) = (attn[:,                              
                    :context_qkv[0].shape[1]], attn[:,                             
                    context_qkv[0].shape[1]:])                                     
                    if not context_block.pre_only:                                 
                    context =                                                      
                    context_block.post_attention(context_attn,                     
                    *context_intermediates)                                        
                    else:                                                          
                    context = None                                                 
                    if x_block.x_block_self_attn:                                  
                    (x_q2, x_k2, x_v2) = x_qkv2                                    
                    attn2 = attention(x_q2, x_k2, x_v2,                            
                    x_block.attn2.num_heads)                                       
                    x = x_block.post_attention_x(x_attn, attn2,                    
                    *x_intermediates)                                              
                    else:                                                          
                    x = x_block.post_attention(x_attn,                             
                    *x_intermediates)                                              
                    return context, x                                              
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: cropped_pos_embed    pylint_plugin.py:61
           DEBUG    Skipping class method: unpatchify           pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    forward_core_with_concat                                       
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    - modulate at line 66                      pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed at line 77       pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 107                                                       
           DEBUG    - get_1d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 116                                                       
           DEBUG    - split_qkv at line 210                    pylint_plugin.py:100
           DEBUG    - optimized_attention at line 215          pylint_plugin.py:100
           DEBUG    - block_mixing at line 591                 pylint_plugin.py:100
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: reset_stats          pylint_plugin.py:61
           DEBUG    Skipping class method: extract_features     pylint_plugin.py:61
           DEBUG    Skipping class method: compute_stats        pylint_plugin.py:61
           DEBUG    Skipping class method: compute_fvd          pylint_plugin.py:61
           DEBUG    Skipping class method: update               pylint_plugin.py:61
           DEBUG    Skipping class method: compute              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: compute_sync_score   pylint_plugin.py:61
           DEBUG    Skipping class method: extract_lip_features pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    extract_audio_features                                         
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    compute_keypoint_confidence                                    
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    compute_keypoint_variance                                      
           DEBUG    Skipping class method: detect_keypoints     pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: reset_metrics        pylint_plugin.py:61
           DEBUG    Skipping class method: evaluate_batch       pylint_plugin.py:61
           DEBUG    Skipping class method: compute_metrics      pylint_plugin.py:61
           DEBUG    Skipping class method: evaluate_model       pylint_plugin.py:61
           DEBUG    Skipping class method: compare_models       pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: run_ablation_study at                       
                    line 290                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def run_ablation_study(model: nn.Module,                       
                    test_loader: DataLoader, config_variants:                      
                    List[Dict], evaluator: OmniHumanEvaluator)                     
                    -> Dict[str, Dict]:                                            
                        """Run ablation study with different                       
                    model configurations."""                                       
                        results = {}                                               
                        for variant in config_variants:                            
                            print(f"\nTesting configuration:                       
                    {variant['name']}")                                            
                            model.load_state_dict(torch.load(va                    
                    riant['checkpoint']))                                          
                            evaluator.reset_metrics()                              
                            metrics =                                              
                    evaluator.evaluate_model(model,                                
                    test_loader)                                                   
                            results[variant['name']] = metrics                     
                        if evaluator.save_dir:                                     
                            with open(evaluator.save_dir /                         
                    'ablation_study.json', 'w') as f:                              
                                json.dump(results, f, indent=2)                    
                        return results                                             
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def run_ablation_study(model: nn.Module,                       
                    test_loader: DataLoader, config_variants:                      
                    List[Dict], evaluator: OmniHumanEvaluator)                     
                    -> Dict[str, Dict]:                                            
                    results = {}                                                   
                    for variant in config_variants:                                
                    print(f"\nTesting configuration:                               
                    {variant['name']}")                                            
                    model.load_state_dict(torch.load(variant['c                    
                    heckpoint']))                                                  
                    evaluator.reset_metrics()                                      
                    metrics = evaluator.evaluate_model(model,                      
                    test_loader)                                                   
                    results[variant['name']] = metrics                             
                    if evaluator.save_dir:                                         
                    with open(evaluator.save_dir /                                 
                    'ablation_study.json', 'w') as f:                              
                    json.dump(results, f, indent=2)                                
                    return results                                                 
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    - modulate at line 66                      pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed at line 77       pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 107                                                       
           DEBUG    - get_1d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 116                                                       
           DEBUG    - split_qkv at line 210                    pylint_plugin.py:100
           DEBUG    - optimized_attention at line 215          pylint_plugin.py:100
           DEBUG    - block_mixing at line 591                 pylint_plugin.py:100
           DEBUG    - run_ablation_study at line 290           pylint_plugin.py:100
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: encode               pylint_plugin.py:61
           DEBUG    Skipping class method: decode               pylint_plugin.py:61
           DEBUG    Skipping class method: reparameterize       pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: process_audio        pylint_plugin.py:61
           DEBUG    Skipping class method: process_pose         pylint_plugin.py:61
           DEBUG    Skipping class method: process_reference    pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    - modulate at line 66                      pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed at line 77       pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 107                                                       
           DEBUG    - get_1d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 116                                                       
           DEBUG    - split_qkv at line 210                    pylint_plugin.py:100
           DEBUG    - optimized_attention at line 215          pylint_plugin.py:100
           DEBUG    - block_mixing at line 591                 pylint_plugin.py:100
           DEBUG    - run_ablation_study at line 290           pylint_plugin.py:100
           DEBUG                                                pylint_plugin.py:64
                    Checking function: attention at line 17                        
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def attention(q, k, v, heads, mask=None):                      
                        """Convenience wrapper around a basic                      
                    attention operation"""                                         
                        (b, _, dim_head) = q.shape                                 
                        dim_head //= heads                                         
                        (q, k, v) = map(lambda t: t.view(b, -1,                    
                    heads, dim_head).transpose(1, 2), (q, k,                       
                    v))                                                            
                        out =                                                      
                    torch.nn.functional.scaled_dot_product_atte                    
                    ntion(q, k, v, attn_mask=mask,                                 
                    dropout_p=0.0, is_causal=False)                                
                        return out.transpose(1, 2).reshape(b,                      
                    -1, heads * dim_head)                                          
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def attention(q, k, v, heads, mask=None):                      
                    (b, _, dim_head) = q.shape                                     
                    dim_head //= heads                                             
                    (q, k, v) = map(lambda t: t.view(b, -1,                        
                    heads, dim_head).transpose(1, 2), (q, k,                       
                    v))                                                            
                    out =                                                          
                    torch.nn.functional.scaled_dot_product_atte                    
                    ntion(q, k, v, attn_mask=mask,                                 
                    dropout_p=0.0, is_causal=False)                                
                    return out.transpose(1, 2).reshape(b, -1,                      
                    heads * dim_head)                                              
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: get_input_embeddings pylint_plugin.py:61
           DEBUG    Skipping class method: set_input_embeddings pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: parse_parentheses at                        
                    line 245                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def parse_parentheses(string):                                 
                        result = []                                                
                        current_item = ''                                          
                        nesting_level = 0                                          
                        for char in string:                                        
                            if char == '(':                                        
                                if nesting_level == 0:                             
                                    if current_item:                               
                                        result.append(current_i                    
                    tem)                                                           
                                        current_item = '('                         
                                    else:                                          
                                        current_item = '('                         
                                else:                                              
                                    current_item += char                           
                                nesting_level += 1                                 
                            elif char == ')':                                      
                                nesting_level -= 1                                 
                                if nesting_level == 0:                             
                                    result.append(current_item                     
                    + ')')                                                         
                                    current_item = ''                              
                                else:                                              
                                    current_item += char                           
                            else:                                                  
                                current_item += char                               
                        if current_item:                                           
                            result.append(current_item)                            
                        return result                                              
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def parse_parentheses(string):                                 
                    result = []                                                    
                    current_item = ''                                              
                    nesting_level = 0                                              
                    for char in string:                                            
                    if char == '(':                                                
                    if nesting_level == 0:                                         
                    if current_item:                                               
                    result.append(current_item)                                    
                    current_item = '('                                             
                    else:                                                          
                    current_item = '('                                             
                    else:                                                          
                    current_item += char                                           
                    nesting_level += 1                                             
                    elif char == ')':                                              
                    nesting_level -= 1                                             
                    if nesting_level == 0:                                         
                    result.append(current_item + ')')                              
                    current_item = ''                                              
                    else:                                                          
                    current_item += char                                           
                    else:                                                          
                    current_item += char                                           
                    if current_item:                                               
                    result.append(current_item)                                    
                    return result                                                  
           DEBUG                                                pylint_plugin.py:64
                    Checking function: token_weights at line                       
                    274                                                            
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def token_weights(string, current_weight):                     
                        a = parse_parentheses(string)                              
                        out = []                                                   
                        for x in a:                                                
                            weight = current_weight                                
                            if len(x) >= 2 and x[-1] == ')' and                    
                    x[0] == '(':                                                   
                                x = x[1:-1]                                        
                                xx = x.rfind(':')                                  
                                weight *= 1.1                                      
                                if xx > 0:                                         
                                    try:                                           
                                        weight = float(x)                          
                                        x = x[:xx]                                 
                                    except:                                        
                                        pass                                       
                                out += token_weights(x, weight)                    
                            else:                                                  
                                out += [(x, current_weight)]                       
                        return out                                                 
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def token_weights(string, current_weight):                     
                    a = parse_parentheses(string)                                  
                    out = []                                                       
                    for x in a:                                                    
                    weight = current_weight                                        
                    if len(x) >= 2 and x[-1] == ')' and x[0] ==                    
                    '(':                                                           
                    x = x[1:-1]                                                    
                    xx = x.rfind(':')                                              
                    weight *= 1.1                                                  
                    if xx > 0:                                                     
                    try:                                                           
                    weight = float(x)                                              
                    x = x[:xx]                                                     
                    except:                                                        
                    pass                                                           
                    out += token_weights(x, weight)                                
                    else:                                                          
                    out += [(x, current_weight)]                                   
                    return out                                                     
           DEBUG                                                pylint_plugin.py:64
                    Checking function: escape_important at line                    
                    295                                                            
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def escape_important(text):                                    
                        text = text.replace('\\)', '\x00\x01')                     
                        text = text.replace('\\(', '\x00\x02')                     
                        return text                                                
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def escape_important(text):                                    
                    text = text.replace('\\)', '\x00\x01')                         
                    text = text.replace('\\(', '\x00\x02')                         
                    return text                                                    
           DEBUG                                                pylint_plugin.py:64
                    Checking function: unescape_important at                       
                    line 301                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def unescape_important(text):                                  
                        text = text.replace('\x00\x01', ')')                       
                        text = text.replace('\x00\x02', '(')                       
                        return text                                                
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def unescape_important(text):                                  
                    text = text.replace('\x00\x01', ')')                           
                    text = text.replace('\x00\x02', '(')                           
                    return text                                                    
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    tokenize_with_weights                                          
           DEBUG    Skipping class method: untokenize           pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    tokenize_with_weights                                          
           DEBUG    Skipping class method: encode_token_weights pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: set_clip_options     pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    _relative_position_bucket                                      
           DEBUG    Skipping class method: compute_bias         pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: get_input_embeddings pylint_plugin.py:61
           DEBUG    Skipping class method: set_input_embeddings pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    - modulate at line 66                      pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed at line 77       pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 107                                                       
           DEBUG    - get_1d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 116                                                       
           DEBUG    - split_qkv at line 210                    pylint_plugin.py:100
           DEBUG    - optimized_attention at line 215          pylint_plugin.py:100
           DEBUG    - block_mixing at line 591                 pylint_plugin.py:100
           DEBUG    - run_ablation_study at line 290           pylint_plugin.py:100
           DEBUG    - attention at line 17                     pylint_plugin.py:100
           DEBUG    - parse_parentheses at line 245            pylint_plugin.py:100
           DEBUG    - token_weights at line 274                pylint_plugin.py:100
           DEBUG    - escape_important at line 295             pylint_plugin.py:100
           DEBUG    - unescape_important at line 301           pylint_plugin.py:100
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: normalize_code       pylint_plugin.py:61
           DEBUG    Skipping class method: visit_functiondef    pylint_plugin.py:61
           DEBUG    Skipping class method: leave_module         pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: register at line 102                        
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def register(linter: PyLinter) -> None:                        
                        """Register the checker with pylint."""                    
                        linter.register_checker(DuplicateCodeCh                    
                    ecker(linter))                                                 
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def register(linter: PyLinter) -> None:                        
                    linter.register_checker(DuplicateCodeChecke                    
                    r(linter))                                                     
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    - modulate at line 66                      pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed at line 77       pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 107                                                       
           DEBUG    - get_1d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 116                                                       
           DEBUG    - split_qkv at line 210                    pylint_plugin.py:100
           DEBUG    - optimized_attention at line 215          pylint_plugin.py:100
           DEBUG    - block_mixing at line 591                 pylint_plugin.py:100
           DEBUG    - run_ablation_study at line 290           pylint_plugin.py:100
           DEBUG    - attention at line 17                     pylint_plugin.py:100
           DEBUG    - parse_parentheses at line 245            pylint_plugin.py:100
           DEBUG    - token_weights at line 274                pylint_plugin.py:100
           DEBUG    - escape_important at line 295             pylint_plugin.py:100
           DEBUG    - unescape_important at line 301           pylint_plugin.py:100
           DEBUG    - register at line 102                     pylint_plugin.py:100
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: sigma_min            pylint_plugin.py:61
           DEBUG    Skipping class method: sigma_max            pylint_plugin.py:61
           DEBUG    Skipping class method: timestep             pylint_plugin.py:61
           DEBUG    Skipping class method: sigma                pylint_plugin.py:61
           DEBUG    Skipping class method: calculate_denoised   pylint_plugin.py:61
           DEBUG    Skipping class method: noise_scaling        pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: apply_model          pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: get_dtype            pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: process_in           pylint_plugin.py:61
           DEBUG    Skipping class method: process_out          pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    decode_latent_to_preview                                       
           DEBUG                                                pylint_plugin.py:64
                    Checking function: append_dims at line 324                     
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def append_dims(x, target_dims):                               
                        """Appends dimensions to the end of a                      
                    tensor until it has target_dims                                
                    dimensions."""                                                 
                        dims_to_append = target_dims - x.ndim                      
                        return x[(..., ) + (None, ) *                              
                    dims_to_append]                                                
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def append_dims(x, target_dims):                               
                    dims_to_append = target_dims - x.ndim                          
                    return x[(..., ) + (None, ) *                                  
                    dims_to_append]                                                
           DEBUG                                                pylint_plugin.py:64
                    Checking function: to_d at line 330                            
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def to_d(x, sigma, denoised):                                  
                        """Converts a denoiser output to a                         
                    Karras ODE derivative."""                                      
                        return (x - denoised) /                                    
                    append_dims(sigma, x.ndim)                                     
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def to_d(x, sigma, denoised):                                  
                    return (x - denoised) / append_dims(sigma,                     
                    x.ndim)                                                        
           DEBUG                                                pylint_plugin.py:64
                    Checking function: sample_euler at line 335                    
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    @torch.no_grad()                                               
                    @torch.autocast('cuda',                                        
                    dtype=torch.float16)                                           
                    def sample_euler(model, x, sigmas,                             
                    extra_args=None):                                              
                        """Implements Algorithm 2 (Euler steps)                    
                    from Karras et al. (2022)."""                                  
                        extra_args = {} if extra_args is None                      
                    else extra_args                                                
                        s_in = x.new_ones([x.shape[0]])                            
                        for i in tqdm(range(len(sigmas) - 1)):                     
                            sigma_hat = sigmas                                     
                            denoised = model(x, sigma_hat *                        
                    s_in, **extra_args)                                            
                            d = to_d(x, sigma_hat, denoised)                       
                            dt = sigmas - sigma_hat                                
                            x = x + d * dt                                         
                        return x                                                   
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    @torch.no_grad()                                               
                    @torch.autocast('cuda',                                        
                    dtype=torch.float16)                                           
                    def sample_euler(model, x, sigmas,                             
                    extra_args=None):                                              
                    extra_args = {} if extra_args is None else                     
                    extra_args                                                     
                    s_in = x.new_ones([x.shape[0]])                                
                    for i in tqdm(range(len(sigmas) - 1)):                         
                    sigma_hat = sigmas                                             
                    denoised = model(x, sigma_hat * s_in,                          
                    **extra_args)                                                  
                    d = to_d(x, sigma_hat, denoised)                               
                    dt = sigmas - sigma_hat                                        
                    x = x + d * dt                                                 
                    return x                                                       
           DEBUG                                                pylint_plugin.py:64
                    Checking function: sample_dpmpp_2m at line                     
                    351                                                            
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    @torch.no_grad()                                               
                    @torch.autocast('cuda',                                        
                    dtype=torch.float16)                                           
                    def sample_dpmpp_2m(model, x, sigmas,                          
                    extra_args=None):                                              
                        """DPM-Solver++(2M)."""                                    
                        extra_args = {} if extra_args is None                      
                    else extra_args                                                
                        s_in = x.new_ones([x.shape[0]])                            
                        sigma_fn = lambda t: t.neg().exp()                         
                        t_fn = lambda sigma: sigma.log().neg()                     
                        old_denoised = None                                        
                        for i in tqdm(range(len(sigmas) - 1)):                     
                            denoised = model(x, sigmas * s_in,                     
                    **extra_args)                                                  
                            (t, t_next) = (t_fn(sigmas),                           
                    t_fn(sigmas))                                                  
                            h = t_next - t                                         
                            if old_denoised is None or sigmas                      
                    == 0:                                                          
                                x = sigma_fn(t_next) /                             
                    sigma_fn(t) * x - (-h).expm1() * denoised                      
                            else:                                                  
                                h_last = t - t_fn(sigmas)                          
                                r = h_last / h                                     
                                denoised_d = (1 + 1 / (2 * r))                     
                    * denoised - 1 / (2 * r) * old_denoised                        
                                x = sigma_fn(t_next) /                             
                    sigma_fn(t) * x - (-h).expm1() * denoised_d                    
                            old_denoised = denoised                                
                        return x                                                   
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    @torch.no_grad()                                               
                    @torch.autocast('cuda',                                        
                    dtype=torch.float16)                                           
                    def sample_dpmpp_2m(model, x, sigmas,                          
                    extra_args=None):                                              
                    extra_args = {} if extra_args is None else                     
                    extra_args                                                     
                    s_in = x.new_ones([x.shape[0]])                                
                    sigma_fn = lambda t: t.neg().exp()                             
                    t_fn = lambda sigma: sigma.log().neg()                         
                    old_denoised = None                                            
                    for i in tqdm(range(len(sigmas) - 1)):                         
                    denoised = model(x, sigmas * s_in,                             
                    **extra_args)                                                  
                    (t, t_next) = (t_fn(sigmas), t_fn(sigmas))                     
                    h = t_next - t                                                 
                    if old_denoised is None or sigmas == 0:                        
                    x = sigma_fn(t_next) / sigma_fn(t) * x -                       
                    (-h).expm1() * denoised                                        
                    else:                                                          
                    h_last = t - t_fn(sigmas)                                      
                    r = h_last / h                                                 
                    denoised_d = (1 + 1 / (2 * r)) * denoised -                    
                    1 / (2 * r) * old_denoised                                     
                    x = sigma_fn(t_next) / sigma_fn(t) * x -                       
                    (-h).expm1() * denoised_d                                      
                    old_denoised = denoised                                        
                    return x                                                       
           DEBUG                                                pylint_plugin.py:64
                    Checking function: Normalize at line 380                       
[06:21:07] DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def Normalize(in_channels, num_groups=32,                      
                    dtype=torch.float32, device=None):                             
                        return                                                     
                    torch.nn.GroupNorm(num_groups=num_groups,                      
                    num_channels=in_channels, eps=1e-06,                           
                    affine=True, dtype=dtype, device=device)                       
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def Normalize(in_channels, num_groups=32,                      
                    dtype=torch.float32, device=None):                             
                    return                                                         
                    torch.nn.GroupNorm(num_groups=num_groups,                      
                    num_channels=in_channels, eps=1e-06,                           
                    affine=True, dtype=dtype, device=device)                       
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: decode               pylint_plugin.py:61
           DEBUG    Skipping class method: encode               pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    - modulate at line 66                      pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed at line 77       pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 107                                                       
           DEBUG    - get_1d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 116                                                       
           DEBUG    - split_qkv at line 210                    pylint_plugin.py:100
           DEBUG    - optimized_attention at line 215          pylint_plugin.py:100
           DEBUG    - block_mixing at line 591                 pylint_plugin.py:100
           DEBUG    - run_ablation_study at line 290           pylint_plugin.py:100
           DEBUG    - attention at line 17                     pylint_plugin.py:100
           DEBUG    - parse_parentheses at line 245            pylint_plugin.py:100
           DEBUG    - token_weights at line 274                pylint_plugin.py:100
           DEBUG    - escape_important at line 295             pylint_plugin.py:100
           DEBUG    - unescape_important at line 301           pylint_plugin.py:100
           DEBUG    - register at line 102                     pylint_plugin.py:100
           DEBUG    - append_dims at line 324                  pylint_plugin.py:100
           DEBUG    - to_d at line 330                         pylint_plugin.py:100
           DEBUG    - sample_euler at line 335                 pylint_plugin.py:100
           DEBUG    - sample_dpmpp_2m at line 351              pylint_plugin.py:100
           DEBUG    - Normalize at line 380                    pylint_plugin.py:100
           DEBUG                                                pylint_plugin.py:64
                    Checking function: load_into at line 36                        
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def load_into(ckpt, model, prefix, device,                     
                    dtype=None, remap=None):                                       
                        """Just a debugging-friendly hack to                       
                    apply the weights in a safetensors file to                     
                    the pytorch module."""                                         
                        for key in ckpt.keys():                                    
                            model_key = key                                        
                            if remap is not None and key in                        
                    remap:                                                         
                                model_key = remap                                  
                            if model_key.startswith(prefix) and                    
                    not model_key.startswith('loss.'):                             
                                path = model_key.split('.')                        
                                obj = model                                        
                                for p in path:                                     
                                    if obj is list:                                
                                        obj = obj                                  
                                    else:                                          
                                        obj = getattr(obj, p,                      
                    None)                                                          
                                        if obj is None:                            
                                            print(f"Skipping                       
                    key '{model_key}' in safetensors file as                       
                    '{p}' does not exist in python model")                         
                                            break                                  
                                if obj is None:                                    
                                    continue                                       
                                try:                                               
                                    tensor =                                       
                    ckpt.get_tensor(key).to(device=device)                         
                                    if dtype is not None and                       
                    tensor.dtype != torch.int32:                                   
                                        tensor =                                   
                    tensor.to(dtype=dtype)                                         
                                    obj.requires_grad_(False)                      
                                    if obj.shape !=                                
                    tensor.shape:                                                  
                                        print(f'W: shape                           
                    mismatch for key {model_key}, {obj.shape}                      
                    != {tensor.shape}')                                            
                                    obj.set_(tensor)                               
                                except Exception as e:                             
                                    print(f"Failed to load key                     
                    '{key}' in safetensors file: {e}")                             
                                    raise e                                        
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def load_into(ckpt, model, prefix, device,                     
                    dtype=None, remap=None):                                       
                    for key in ckpt.keys():                                        
                    model_key = key                                                
                    if remap is not None and key in remap:                         
                    model_key = remap                                              
                    if model_key.startswith(prefix) and not                        
                    model_key.startswith('loss.'):                                 
                    path = model_key.split('.')                                    
                    obj = model                                                    
                    for p in path:                                                 
                    if obj is list:                                                
                    obj = obj                                                      
                    else:                                                          
                    obj = getattr(obj, p, None)                                    
                    if obj is None:                                                
                    print(f"Skipping key '{model_key}' in                          
                    safetensors file as '{p}' does not exist in                    
                    python model")                                                 
                    break                                                          
                    if obj is None:                                                
                    continue                                                       
                    try:                                                           
                    tensor =                                                       
                    ckpt.get_tensor(key).to(device=device)                         
                    if dtype is not None and tensor.dtype !=                       
                    torch.int32:                                                   
                    tensor = tensor.to(dtype=dtype)                                
                    obj.requires_grad_(False)                                      
                    if obj.shape != tensor.shape:                                  
                    print(f'W: shape mismatch for key                              
                    {model_key}, {obj.shape} !=                                    
                    {tensor.shape}')                                               
                    obj.set_(tensor)                                               
                    except Exception as e:                                         
                    print(f"Failed to load key '{key}' in                          
                    safetensors file: {e}")                                        
                    raise e                                                        
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: print                pylint_plugin.py:61
           DEBUG    Skipping class method: load                 pylint_plugin.py:61
           DEBUG    Skipping class method: get_empty_latent     pylint_plugin.py:61
           DEBUG    Skipping class method: get_sigmas           pylint_plugin.py:61
           DEBUG    Skipping class method: get_noise            pylint_plugin.py:61
           DEBUG    Skipping class method: get_cond             pylint_plugin.py:61
           DEBUG    Skipping class method: max_denoise          pylint_plugin.py:61
           DEBUG    Skipping class method: fix_cond             pylint_plugin.py:61
           DEBUG    Skipping class method: do_sampling          pylint_plugin.py:61
           DEBUG    Skipping class method: vae_encode           pylint_plugin.py:61
           DEBUG    Skipping class method: vae_encode_tensor    pylint_plugin.py:61
           DEBUG    Skipping class method: vae_decode           pylint_plugin.py:61
           DEBUG    Skipping class method: _image_to_latent     pylint_plugin.py:61
           DEBUG    Skipping class method: gen_image            pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: main at line 550                            
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    @torch.no_grad()                                               
                    def main(prompt=PROMPT, model=MODEL,                           
                    out_dir=OUTDIR, postfix=None, seed=SEED,                       
                    seed_type=SEEDTYPE, sampler=None,                              
                    steps=None, cfg=None, shift=None,                              
                    width=WIDTH, height=HEIGHT,                                    
                    controlnet_ckpt=None,                                          
                    controlnet_cond_image=None, vae=VAEFile,                       
                    init_image=INIT_IMAGE, denoise=DENOISE,                        
                    skip_layer_cfg=False, verbose=False,                           
                    model_folder=MODEL_FOLDER,                                     
                    text_encoder_device='cpu', **kwargs):                          
                        assert not kwargs, f'Unknown arguments:                    
                    {kwargs}'                                                      
                        config =                                                   
                    CONFIGS.get(os.path.splitext(os.path.basena                    
                    me(model))[0], {})                                             
                        _shift = shift or config.get('shift',                      
                    3)                                                             
                        _steps = steps or config.get('steps',                      
                    50)                                                            
                        _cfg = cfg or config.get('cfg', 5)                         
                        _sampler = sampler or                                      
                    config.get('sampler', 'dpmpp_2m')                              
                        if skip_layer_cfg:                                         
                            skip_layer_config =                                    
                    CONFIGS.get(os.path.splitext(os.path.basena                    
                    me(model))[0], {}).get('skip_layer_config',                    
                    {})                                                            
                            cfg = skip_layer_config.get('cfg',                     
                    cfg)                                                           
                        else:                                                      
                            skip_layer_config = {}                                 
                        if controlnet_ckpt is not None:                            
                            controlnet_config =                                    
                    CONFIGS.get(os.path.splitext(os.path.basena                    
                    me(controlnet_ckpt))[0], {})                                   
                            _shift = shift or                                      
                    controlnet_config.get('shift', shift)                          
                            _steps = steps or                                      
                    controlnet_config.get('steps', steps)                          
                            _cfg = cfg or                                          
                    controlnet_config.get('cfg', cfg)                              
                            _sampler = sampler or                                  
                    controlnet_config.get('sampler', sampler)                      
                        inferencer = SD3Inferencer()                               
                        inferencer.load(model, vae, _shift,                        
                    controlnet_ckpt, model_folder,                                 
                    text_encoder_device, verbose)                                  
                        if isinstance(prompt, str):                                
                            if os.path.splitext(prompt)[-1] ==                     
                    '.txt':                                                        
                                with open(prompt, 'r') as f:                       
                                    prompts =                                      
                            else:                                                  
                                prompts =                                          
                        sanitized_prompt =                                         
                    re.sub('[^\\w\\-\\.]', '_', prompt)                            
                        out_dir = os.path.join(out_dir,                            
                    os.path.splitext(os.path.basename(model))[0                    
                    ] + ('_' +                                                     
                    os.path.splitext(os.path.basename(controlne                    
                    t_ckpt))[0] if controlnet_ckpt is not None                     
                    else ''),                                                      
                    os.path.splitext(os.path.basename(sanitized                    
                    _prompt))[0][:50] + (postfix or                                
                    datetime.datetime.now().strftime('_%Y-%m-%d                    
                    T%H-%M-%S')))                                                  
                        os.makedirs(out_dir, exist_ok=False)                       
                        inferencer.gen_image(prompts, width,                       
                    height, _steps, _cfg, _sampler, seed,                          
                    seed_type, out_dir, controlnet_cond_image,                     
                    init_image, denoise, skip_layer_config)                        
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    @torch.no_grad()                                               
                    def main(prompt=PROMPT, model=MODEL,                           
                    out_dir=OUTDIR, postfix=None, seed=SEED,                       
                    seed_type=SEEDTYPE, sampler=None,                              
                    steps=None, cfg=None, shift=None,                              
                    width=WIDTH, height=HEIGHT,                                    
                    controlnet_ckpt=None,                                          
                    controlnet_cond_image=None, vae=VAEFile,                       
                    init_image=INIT_IMAGE, denoise=DENOISE,                        
                    skip_layer_cfg=False, verbose=False,                           
                    model_folder=MODEL_FOLDER,                                     
                    text_encoder_device='cpu', **kwargs):                          
                    assert not kwargs, f'Unknown arguments:                        
                    {kwargs}'                                                      
                    config =                                                       
                    CONFIGS.get(os.path.splitext(os.path.basena                    
                    me(model))[0], {})                                             
                    _shift = shift or config.get('shift', 3)                       
                    _steps = steps or config.get('steps', 50)                      
                    _cfg = cfg or config.get('cfg', 5)                             
                    _sampler = sampler or config.get('sampler',                    
                    'dpmpp_2m')                                                    
                    if skip_layer_cfg:                                             
                    skip_layer_config =                                            
                    CONFIGS.get(os.path.splitext(os.path.basena                    
                    me(model))[0], {}).get('skip_layer_config',                    
                    {})                                                            
                    cfg = skip_layer_config.get('cfg', cfg)                        
                    else:                                                          
                    skip_layer_config = {}                                         
                    if controlnet_ckpt is not None:                                
                    controlnet_config =                                            
                    CONFIGS.get(os.path.splitext(os.path.basena                    
                    me(controlnet_ckpt))[0], {})                                   
                    _shift = shift or                                              
                    controlnet_config.get('shift', shift)                          
                    _steps = steps or                                              
                    controlnet_config.get('steps', steps)                          
                    _cfg = cfg or controlnet_config.get('cfg',                     
                    cfg)                                                           
                    _sampler = sampler or                                          
                    controlnet_config.get('sampler', sampler)                      
                    inferencer = SD3Inferencer()                                   
                    inferencer.load(model, vae, _shift,                            
                    controlnet_ckpt, model_folder,                                 
                    text_encoder_device, verbose)                                  
                    if isinstance(prompt, str):                                    
                    if os.path.splitext(prompt)[-1] == '.txt':                     
                    with open(prompt, 'r') as f:                                   
                    prompts =                                                      
                    else:                                                          
                    prompts =                                                      
                    sanitized_prompt = re.sub('[^\\w\\-\\.]',                      
                    '_', prompt)                                                   
                    out_dir = os.path.join(out_dir,                                
                    os.path.splitext(os.path.basename(model))[0                    
                    ] + ('_' +                                                     
                    os.path.splitext(os.path.basename(controlne                    
                    t_ckpt))[0] if controlnet_ckpt is not None                     
                    else ''),                                                      
                    os.path.splitext(os.path.basename(sanitized                    
                    _prompt))[0][:50] + (postfix or                                
                    datetime.datetime.now().strftime('_%Y-%m-%d                    
                    T%H-%M-%S')))                                                  
                    os.makedirs(out_dir, exist_ok=False)                           
                    inferencer.gen_image(prompts, width,                           
                    height, _steps, _cfg, _sampler, seed,                          
                    seed_type, out_dir, controlnet_cond_image,                     
                    init_image, denoise, skip_layer_config)                        
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    - modulate at line 66                      pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed at line 77       pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 107                                                       
           DEBUG    - get_1d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 116                                                       
           DEBUG    - split_qkv at line 210                    pylint_plugin.py:100
           DEBUG    - optimized_attention at line 215          pylint_plugin.py:100
           DEBUG    - block_mixing at line 591                 pylint_plugin.py:100
           DEBUG    - run_ablation_study at line 290           pylint_plugin.py:100
           DEBUG    - attention at line 17                     pylint_plugin.py:100
           DEBUG    - parse_parentheses at line 245            pylint_plugin.py:100
           DEBUG    - token_weights at line 274                pylint_plugin.py:100
           DEBUG    - escape_important at line 295             pylint_plugin.py:100
           DEBUG    - unescape_important at line 301           pylint_plugin.py:100
           DEBUG    - register at line 102                     pylint_plugin.py:100
           DEBUG    - append_dims at line 324                  pylint_plugin.py:100
           DEBUG    - to_d at line 330                         pylint_plugin.py:100
           DEBUG    - sample_euler at line 335                 pylint_plugin.py:100
           DEBUG    - sample_dpmpp_2m at line 351              pylint_plugin.py:100
           DEBUG    - Normalize at line 380                    pylint_plugin.py:100
           DEBUG    - load_into at line 36                     pylint_plugin.py:100
           DEBUG    - main at line 550                         pylint_plugin.py:100
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: _shift_timestep      pylint_plugin.py:61
           DEBUG    Skipping class method: _get_features        pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: forward              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __call__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: update               pylint_plugin.py:61
           DEBUG    Skipping class method: apply_shadow         pylint_plugin.py:61
           DEBUG    Skipping class method: restore              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: reset_metrics        pylint_plugin.py:61
           DEBUG    Skipping class method: log_metrics          pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: save_checkpoint      pylint_plugin.py:61
           DEBUG    Skipping class method: load_checkpoint      pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: train_images         pylint_plugin.py:61
           DEBUG    Skipping class method: train_videos         pylint_plugin.py:61
           DEBUG    Skipping class method: train                pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: initialize_models at                        
                    line 400                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def initialize_models(pretrained_mmdit:                        
                    MMDiTX, max_timesteps: int = 1000):                            
                        """Initialize generator and                                
                    discriminator (Sections 3.2, 3.3)."""                          
                        generator =                                                
                    APTGenerator(pretrained_mmdit,                                 
                    max_timesteps)                                                 
                        import copy                                                
                        discriminator_mmdit =                                      
                    copy.deepcopy(pretrained_mmdit)                                
                        discriminator =                                            
                    APTDiscriminator(discriminator_mmdit,                          
                    max_timesteps=max_timesteps)                                   
                        return generator, discriminator                            
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def initialize_models(pretrained_mmdit:                        
                    MMDiTX, max_timesteps: int = 1000):                            
                    generator = APTGenerator(pretrained_mmdit,                     
                    max_timesteps)                                                 
                    import copy                                                    
                    discriminator_mmdit =                                          
                    copy.deepcopy(pretrained_mmdit)                                
                    discriminator =                                                
                    APTDiscriminator(discriminator_mmdit,                          
                    max_timesteps=max_timesteps)                                   
                    return generator, discriminator                                
           DEBUG                                                pylint_plugin.py:64
                    Checking function: train_apt at line 412                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def train_apt(image_data_loader,                               
                    video_data_loader):                                            
                        """Training pipeline with provided                         
                    MMDiTX initialization (Section 3.5)."""                        
                        device = torch.device('cuda' if                            
                    torch.cuda.is_available() else 'cpu')                          
                        pretrained_mmdit =                                         
                    MMDiTX(input_size=None, patch_size=2,                          
                    in_channels=4, depth=36, mlp_ratio=4.0,                        
                    learn_sigma=False, adm_in_channels=768,                        
                    context_embedder_config={'target':                             
                    'torch.nn.Linear', 'params':                                   
                    {'in_features': 768, 'out_features':                           
                    1152}}, rmsnorm=False,                                         
                    scale_mod_only=False, swiglu=False,                            
                    out_channels=4, pos_embed_max_size=64,                         
                    num_patches=4096, qk_norm=None,                                
                    x_block_self_attn_layers=[], qkv_bias=True,                    
                    dtype=torch.bfloat16, device=device,                           
                    verbose=True)                                                  
                        pretrained_mmdit.x_embedder.proj =                         
                    nn.Conv2d(4, 1152, kernel_size=2, stride=2,                    
                    bias=True, dtype=torch.bfloat16,                               
                    device=device)                                                 
                        for block in                                               
                    pretrained_mmdit.joint_blocks:                                 
                            block.context_block.attn.qkv =                         
                    nn.Linear(1152, 1152 * 3, bias=True,                           
                    dtype=torch.bfloat16, device=device)                           
                            block.context_block.attn.proj =                        
                    nn.Linear(1152, 1152, dtype=torch.bfloat16,                    
                    device=device)                                                 
                            block.x_block.attn.qkv =                               
                    nn.Linear(1152, 1152 * 3, bias=True,                           
                    dtype=torch.bfloat16, device=device)                           
                            block.x_block.attn.proj =                              
                    nn.Linear(1152, 1152, dtype=torch.bfloat16,                    
                    device=device)                                                 
                            block.x_block.mlp.fc1 =                                
                    nn.Linear(1152, int(1152 * 4),                                 
                    dtype=torch.bfloat16, device=device)                           
                            block.x_block.mlp.fc2 =                                
                    nn.Linear(int(1152 * 4), 1152,                                 
                    dtype=torch.bfloat16, device=device)                           
                        pretrained_mmdit.final_layer.linear =                      
                    nn.Linear(1152, 2 * 2 * 4, bias=True,                          
                    dtype=torch.bfloat16, device=device)                           
                        pretrained_mmdit.final_layer.adaLN_modu                    
                    lation[-1] = nn.Linear(1152, 2 * 1152,                         
                    bias=True, dtype=torch.bfloat16,                               
                    device=device)                                                 
                        (generator, discriminator) =                               
                    initialize_models(pretrained_mmdit)                            
                        r1_reg =                                                   
                    ApproximatedR1Regularization(sigma=0.01,                       
                    lambda_r1=100.0)                                               
                        trainer = APTTrainer(generator,                            
                    discriminator, r1_reg, learning_rate=5e-06)                    
                        for epoch in range(350):                                   
                            for (real_samples, conditions) in                      
                    image_data_loader:                                             
                                real_samples =                                     
                    real_samples.unsqueeze(1)                                      
                                (g_loss, d_loss) =                                 
                    trainer.train_step(real_samples,                               
                    conditions, is_video=False)                                    
                                logger.debug(f'Image Epoch                         
                    {epoch}, G Loss: {g_loss}, D Loss:                             
                    {d_loss}')                                                     
                        ema_checkpoint =                                           
                    trainer.ema.shadow.copy()                                      
                        (generator, discriminator) =                               
                    initialize_models(pretrained_mmdit)                            
                        for (name, param) in                                       
                    generator.named_parameters():                                  
                            if name in ema_checkpoint:                             
                                param.data =                                       
                    ema_checkpoint.clone()                                         
                        r1_reg =                                                   
                    ApproximatedR1Regularization(sigma=0.1,                        
                    lambda_r1=100.0)                                               
                        trainer = APTTrainer(generator,                            
                    discriminator, r1_reg, learning_rate=3e-06)                    
                        for epoch in range(300):                                   
                            for (real_samples, conditions) in                      
                    video_data_loader:                                             
                                (g_loss, d_loss) =                                 
                    trainer.train_step(real_samples,                               
                    conditions, is_video=True)                                     
                                logger.debug(f'Video Epoch                         
                    {epoch}, G Loss: {g_loss}, D Loss:                             
                    {d_loss}')                                                     
                        return trainer                                             
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def train_apt(image_data_loader,                               
                    video_data_loader):                                            
                    device = torch.device('cuda' if                                
                    torch.cuda.is_available() else 'cpu')                          
                    pretrained_mmdit = MMDiTX(input_size=None,                     
                    patch_size=2, in_channels=4, depth=36,                         
                    mlp_ratio=4.0, learn_sigma=False,                              
                    adm_in_channels=768,                                           
                    context_embedder_config={'target':                             
                    'torch.nn.Linear', 'params':                                   
                    {'in_features': 768, 'out_features':                           
                    1152}}, rmsnorm=False,                                         
                    scale_mod_only=False, swiglu=False,                            
                    out_channels=4, pos_embed_max_size=64,                         
                    num_patches=4096, qk_norm=None,                                
                    x_block_self_attn_layers=[], qkv_bias=True,                    
                    dtype=torch.bfloat16, device=device,                           
                    verbose=True)                                                  
                    pretrained_mmdit.x_embedder.proj =                             
                    nn.Conv2d(4, 1152, kernel_size=2, stride=2,                    
                    bias=True, dtype=torch.bfloat16,                               
                    device=device)                                                 
                    for block in pretrained_mmdit.joint_blocks:                    
                    block.context_block.attn.qkv =                                 
                    nn.Linear(1152, 1152 * 3, bias=True,                           
                    dtype=torch.bfloat16, device=device)                           
                    block.context_block.attn.proj =                                
                    nn.Linear(1152, 1152, dtype=torch.bfloat16,                    
                    device=device)                                                 
                    block.x_block.attn.qkv = nn.Linear(1152,                       
                    1152 * 3, bias=True, dtype=torch.bfloat16,                     
                    device=device)                                                 
                    block.x_block.attn.proj = nn.Linear(1152,                      
                    1152, dtype=torch.bfloat16, device=device)                     
                    block.x_block.mlp.fc1 = nn.Linear(1152,                        
                    int(1152 * 4), dtype=torch.bfloat16,                           
                    device=device)                                                 
                    block.x_block.mlp.fc2 = nn.Linear(int(1152                     
                    * 4), 1152, dtype=torch.bfloat16,                              
                    device=device)                                                 
                    pretrained_mmdit.final_layer.linear =                          
                    nn.Linear(1152, 2 * 2 * 4, bias=True,                          
                    dtype=torch.bfloat16, device=device)                           
                    pretrained_mmdit.final_layer.adaLN_modulati                    
                    on[-1] = nn.Linear(1152, 2 * 1152,                             
                    bias=True, dtype=torch.bfloat16,                               
                    device=device)                                                 
                    (generator, discriminator) =                                   
                    initialize_models(pretrained_mmdit)                            
                    r1_reg =                                                       
                    ApproximatedR1Regularization(sigma=0.01,                       
                    lambda_r1=100.0)                                               
                    trainer = APTTrainer(generator,                                
                    discriminator, r1_reg, learning_rate=5e-06)                    
                    for epoch in range(350):                                       
                    for (real_samples, conditions) in                              
                    image_data_loader:                                             
                    real_samples = real_samples.unsqueeze(1)                       
                    (g_loss, d_loss) =                                             
                    trainer.train_step(real_samples,                               
                    conditions, is_video=False)                                    
                                                                                   
                    ema_checkpoint = trainer.ema.shadow.copy()                     
                    (generator, discriminator) =                                   
                    initialize_models(pretrained_mmdit)                            
                    for (name, param) in                                           
                    generator.named_parameters():                                  
                    if name in ema_checkpoint:                                     
                    param.data = ema_checkpoint.clone()                            
                    r1_reg =                                                       
                    ApproximatedR1Regularization(sigma=0.1,                        
                    lambda_r1=100.0)                                               
                    trainer = APTTrainer(generator,                                
                    discriminator, r1_reg, learning_rate=3e-06)                    
                    for epoch in range(300):                                       
                    for (real_samples, conditions) in                              
                    video_data_loader:                                             
                    (g_loss, d_loss) =                                             
                    trainer.train_step(real_samples,                               
                    conditions, is_video=True)                                     
                                                                                   
                    return trainer                                                 
           DEBUG                                                pylint_plugin.py:64
                    Checking function: load_sd35_weights at                        
                    line 486                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def load_sd35_weights(model_path: str,                         
                    device: str = 'cuda', dtype: torch.dtype =                     
                    torch.bfloat16) -> dict:                                       
                        logger.info(f'Loading SD3.5 weights                        
                    from {model_path}')                                            
                        with safe_open(model_path,                                 
                    framework='pt', device=device) as f:                           
                            state_dict = {k:                                       
                    f.get_tensor(k).to(dtype=dtype) for k in                       
                    f.keys()}                                                      
                        logger.info(f'Loaded {len(state_dict)}                     
                    weight tensors')                                               
                        expected_mappings =                                        
                    {'model.diffusion_model.x_embedder.proj.wei                    
                    ght': (1024, 16, 2, 2),                                        
                    'model.diffusion_model.y_embedder.mlp.0.wei                    
                    ght': (1152, 4096),                                            
                    'model.diffusion_model.joint_blocks.0.conte                    
                    xt_block.attn.qkv.weight': (3072, 1024),                       
                    'model.diffusion_model.final_layer.linear.w                    
                    eight': (16, 1024)}                                            
                        mapped_state_dict = {}                                     
                        prefix = 'model.diffusion_model.'                          
                        missing_keys = []                                          
                        shape_mismatches = []                                      
                        for (key, tensor) in                                       
                    state_dict.items():                                            
                            if key.startswith(prefix):                             
                                new_key = key                                      
                                mapped_key = new_key                               
                                if 'x_embedder' in new_key:                        
                                    mapped_key =                                   
                    f"x_embedder.{new_key.split('x_embedder.')[                    
                    -1]}"                                                          
                                elif 'y_embedder' in new_key:                      
                                    mapped_key =                                   
                    f"y_embedder.{new_key.split('y_embedder.')[                    
                    -1]}"                                                          
                                mapped_state_dict = tensor                         
                                if key in expected_mappings:                       
                                    expected_shape =                               
                    expected_mappings                                              
                                    if tuple(tensor.shape) !=                      
                    expected_shape:                                                
                                        shape_mismatches.append                    
                    (f'{key}: Expected {expected_shape}, got                       
                    {tuple(tensor.shape)}')                                        
                                logger.debug(f'Loaded {key} ->                     
                    {mapped_key}: {tensor.shape}')                                 
                            else:                                                  
                                missing_keys.append(key)                           
                        if missing_keys:                                           
                            logger.warning(f'Keys not mapped:                      
                    {len(missing_keys)} (e.g.,                                     
                    {missing_keys[:5]})')                                          
                        if shape_mismatches:                                       
                            logger.error(f'Shape mismatches                        
                    detected: {shape_mismatches}')                                 
                            raise ValueError('Weight shape                         
                    validation failed')                                            
                        else:                                                      
                            logger.info('All key shapes                            
                    validated successfully')                                       
                        return mapped_state_dict                                   
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def load_sd35_weights(model_path: str,                         
                    device: str = 'cuda', dtype: torch.dtype =                     
                    torch.bfloat16) -> dict:                                       
                                                                                   
                    with safe_open(model_path, framework='pt',                     
                    device=device) as f:                                           
                    state_dict = {k:                                               
                    f.get_tensor(k).to(dtype=dtype) for k in                       
                    f.keys()}                                                      
                    } weight tensors')                                             
                    expected_mappings =                                            
                    {'model.diffusion_model.x_embedder.proj.wei                    
                    ght': (1024, 16, 2, 2),                                        
                    'model.diffusion_model.y_embedder.mlp.0.wei                    
                    ght': (1152, 4096),                                            
                    'model.diffusion_model.joint_blocks.0.conte                    
                    xt_block.attn.qkv.weight': (3072, 1024),                       
                    'model.diffusion_model.final_layer.linear.w                    
                    eight': (16, 1024)}                                            
                    mapped_state_dict = {}                                         
                    prefix = 'model.diffusion_model.'                              
                    missing_keys = []                                              
                    shape_mismatches = []                                          
                    for (key, tensor) in state_dict.items():                       
                    if key.startswith(prefix):                                     
                    new_key = key                                                  
                    mapped_key = new_key                                           
                    if 'x_embedder' in new_key:                                    
                    mapped_key =                                                   
                    f"x_embedder.{new_key.split('x_embedder.')[                    
                    -1]}"                                                          
                    elif 'y_embedder' in new_key:                                  
                    mapped_key =                                                   
                    f"y_embedder.{new_key.split('y_embedder.')[                    
                    -1]}"                                                          
                    mapped_state_dict = tensor                                     
                    if key in expected_mappings:                                   
                    expected_shape = expected_mappings                             
                    if tuple(tensor.shape) != expected_shape:                      
                    shape_mismatches.append(f'{key}: Expected                      
                    {expected_shape}, got                                          
                    {tuple(tensor.shape)}')                                        
                                                                                   
                    else:                                                          
                    missing_keys.append(key)                                       
                    if missing_keys:                                               
                    } (e.g., {missing_keys[:5]})')                                 
                    if shape_mismatches:                                           
                                                                                   
                    raise ValueError('Weight shape validation                      
                    failed')                                                       
                    else:                                                          
                                                                                   
                    return mapped_state_dict                                       
           DEBUG                                                pylint_plugin.py:64
                    Checking function: load_sd35_weights at                        
                    line 541                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def load_sd35_weights(model_path: str,                         
                    device: str = 'cuda', dtype: torch.dtype =                     
                    torch.bfloat16) -> dict:                                       
                        logger.info(f'Loading SD3.5 weights                        
                    from {model_path}')                                            
                        with safe_open(model_path,                                 
                    framework='pt', device=device) as f:                           
                            state_dict = {k:                                       
                    f.get_tensor(k).to(dtype=dtype) for k in                       
                    f.keys()}                                                      
                        mapped_state_dict = {}                                     
                        prefix = 'model.diffusion_model.'                          
                        for (key, tensor) in                                       
                    state_dict.items():                                            
                            if key.startswith(prefix):                             
                                new_key = key                                      
                                if 'x_embedder' in new_key:                        
                                    mapped_key =                                   
                    f"x_embedder.{new_key.split('x_embedder.')[                    
                    -1]}"                                                          
                                elif 'y_embedder' in new_key:                      
                                    mapped_key =                                   
                    f"y_embedder.{new_key.split('y_embedder.')[                    
                    -1]}"                                                          
                                else:                                              
                                    mapped_key = new_key                           
                                mapped_state_dict = tensor                         
                                logger.debug(f'Loaded {key} ->                     
                    {mapped_key}: {tensor.shape}')                                 
                        logger.info(f'Loaded and mapped                            
                    {len(mapped_state_dict)} weights')                             
                        return mapped_state_dict                                   
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def load_sd35_weights(model_path: str,                         
                    device: str = 'cuda', dtype: torch.dtype =                     
                    torch.bfloat16) -> dict:                                       
                                                                                   
                    with safe_open(model_path, framework='pt',                     
                    device=device) as f:                                           
                    state_dict = {k:                                               
                    f.get_tensor(k).to(dtype=dtype) for k in                       
                    f.keys()}                                                      
                    mapped_state_dict = {}                                         
                    prefix = 'model.diffusion_model.'                              
                    for (key, tensor) in state_dict.items():                       
                    if key.startswith(prefix):                                     
                    new_key = key                                                  
                    if 'x_embedder' in new_key:                                    
                    mapped_key =                                                   
                    f"x_embedder.{new_key.split('x_embedder.')[                    
                    -1]}"                                                          
                    elif 'y_embedder' in new_key:                                  
                    mapped_key =                                                   
                    f"y_embedder.{new_key.split('y_embedder.')[                    
                    -1]}"                                                          
                    else:                                                          
                    mapped_key = new_key                                           
                    mapped_state_dict = tensor                                     
                                                                                   
                    } weights')                                                    
                    return mapped_state_dict                                       
           DEBUG                                                pylint_plugin.py:74
                    Comparing with existing function                               
                    load_sd35_weights at line 486                                  
           DEBUG    Differences:                                pylint_plugin.py:78
           DEBUG    - } weight tensors')                        pylint_plugin.py:81
           DEBUG    - expected_mappings =                       pylint_plugin.py:81
                    {'model.diffusion_model.x_embedder.proj.wei                    
                    ght': (1024, 16, 2, 2),                                        
                    'model.diffusion_model.y_embedder.mlp.0.wei                    
                    ght': (1152, 4096),                                            
                    'model.diffusion_model.joint_blocks.0.conte                    
                    xt_block.attn.qkv.weight': (3072, 1024),                       
                    'model.diffusion_model.final_layer.linear.w                    
                    eight': (16, 1024)}                                            
           DEBUG    - missing_keys = []                         pylint_plugin.py:81
           DEBUG    - shape_mismatches = []                     pylint_plugin.py:81
           DEBUG    - mapped_key = new_key                      pylint_plugin.py:81
           DEBUG    + else:                                     pylint_plugin.py:81
           DEBUG    + mapped_key = new_key                      pylint_plugin.py:81
           DEBUG    - if key in expected_mappings:              pylint_plugin.py:81
           DEBUG    - expected_shape = expected_mappings        pylint_plugin.py:81
           DEBUG    - if tuple(tensor.shape) != expected_shape: pylint_plugin.py:81
           DEBUG    - shape_mismatches.append(f'{key}: Expected pylint_plugin.py:81
                    {expected_shape}, got                                          
                    {tuple(tensor.shape)}')                                        
           DEBUG    + } weights')                               pylint_plugin.py:81
           DEBUG    - else:                                     pylint_plugin.py:81
           DEBUG    - missing_keys.append(key)                  pylint_plugin.py:81
           DEBUG    - if missing_keys:                          pylint_plugin.py:81
           DEBUG    - } (e.g., {missing_keys[:5]})')            pylint_plugin.py:81
           DEBUG    - if shape_mismatches:                      pylint_plugin.py:81
           DEBUG    -                                           pylint_plugin.py:81
           DEBUG    - raise ValueError('Weight shape validation pylint_plugin.py:81
                    failed')                                                       
           DEBUG    - else:                                     pylint_plugin.py:81
           DEBUG    -                                           pylint_plugin.py:81
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    _validate_initialization                                       
           DEBUG    Skipping class method: set_learning_rate    pylint_plugin.py:61
           DEBUG    Skipping class method: set_r1_sigma         pylint_plugin.py:61
           DEBUG    Skipping class method: train_step           pylint_plugin.py:61
           DEBUG    Skipping class method: generate_samples     pylint_plugin.py:61
           DEBUG    Skipping class method: train_images         pylint_plugin.py:61
           DEBUG    Skipping class method: train_videos         pylint_plugin.py:61
           DEBUG    Skipping class method: train                pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: main at line 794                            
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def main():                                                    
                        config = APTConfig(train_images=True,                      
                    train_videos=True, image_batch_size=8,                         
                    video_batch_size=8, world_size=1,                              
                    local_rank=0, device='cuda',                                   
                    dtype=torch.bfloat16)                                          
                                                                                   
                                                                                   
                        class                                                      
                    DummyDataset(torch.utils.data.Dataset):                        
                                                                                   
                            def __init__(self, is_video=False):                    
                                self.is_video = is_video                           
                                                                                   
                            def __len__(self):                                     
                                return 100                                         
                                                                                   
                            def __getitem__(self, idx):                            
                                if self.is_video:                                  
                                    return torch.randn(48, 16,                     
                    45, 80), torch.randn(4096)                                     
                                return torch.randn(16, 64, 64),                    
                    torch.randn(4096)                                              
                                                                                   
                        image_loader =                                             
                    torch.utils.data.DataLoader(DummyDataset(is                    
                    _video=False),                                                 
                    batch_size=config.image_batch_size)                            
                        video_loader =                                             
                    torch.utils.data.DataLoader(DummyDataset(is                    
                    _video=True),                                                  
                    batch_size=config.video_batch_size)                            
                        trainer =                                                  
                    SeaweedTrainer(model_path='./models/sd3.5_m                    
                    edium.safetensors', config=config,                             
                    image_dataloader=image_loader,                                 
                    video_dataloader=video_loader)                                 
                        trainer.train()                                            
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def main():                                                    
                    config = APTConfig(train_images=True,                          
                    train_videos=True, image_batch_size=8,                         
                    video_batch_size=8, world_size=1,                              
                    local_rank=0, device='cuda',                                   
                    dtype=torch.bfloat16)                                          
                    class                                                          
                    DummyDataset(torch.utils.data.Dataset):                        
                    def __init__(self, is_video=False):                            
                    self.is_video = is_video                                       
                    def __len__(self):                                             
                    return 100                                                     
                    def __getitem__(self, idx):                                    
                    if self.is_video:                                              
                    return torch.randn(48, 16, 45, 80),                            
                    torch.randn(4096)                                              
                    return torch.randn(16, 64, 64),                                
                    torch.randn(4096)                                              
                    image_loader =                                                 
                    torch.utils.data.DataLoader(DummyDataset(is                    
                    _video=False),                                                 
                    batch_size=config.image_batch_size)                            
                    video_loader =                                                 
                    torch.utils.data.DataLoader(DummyDataset(is                    
                    _video=True),                                                  
                    batch_size=config.video_batch_size)                            
                    trainer =                                                      
                    SeaweedTrainer(model_path='./models/sd3.5_m                    
                    edium.safetensors', config=config,                             
                    image_dataloader=image_loader,                                 
                    video_dataloader=video_loader)                                 
                    trainer.train()                                                
           DEBUG                                                pylint_plugin.py:74
                    Comparing with existing function main at                       
                    line 550                                                       
           DEBUG    Differences:                                pylint_plugin.py:78
           DEBUG    + def main():                               pylint_plugin.py:81
           DEBUG    + config = APTConfig(train_images=True,     pylint_plugin.py:81
                    train_videos=True, image_batch_size=8,                         
                    video_batch_size=8, world_size=1,                              
                    local_rank=0, device='cuda',                                   
                    dtype=torch.bfloat16)                                          
           DEBUG    + class                                     pylint_plugin.py:81
                    DummyDataset(torch.utils.data.Dataset):                        
           DEBUG    + def __init__(self, is_video=False):       pylint_plugin.py:81
           DEBUG    + self.is_video = is_video                  pylint_plugin.py:81
           DEBUG    + def __len__(self):                        pylint_plugin.py:81
           DEBUG    + return 100                                pylint_plugin.py:81
           DEBUG    + def __getitem__(self, idx):               pylint_plugin.py:81
           DEBUG    + if self.is_video:                         pylint_plugin.py:81
           DEBUG    + return torch.randn(48, 16, 45, 80),       pylint_plugin.py:81
                    torch.randn(4096)                                              
           DEBUG    + return torch.randn(16, 64, 64),           pylint_plugin.py:81
                    torch.randn(4096)                                              
           DEBUG    + image_loader =                            pylint_plugin.py:81
                    torch.utils.data.DataLoader(DummyDataset(is                    
                    _video=False),                                                 
                    batch_size=config.image_batch_size)                            
           DEBUG    + video_loader =                            pylint_plugin.py:81
                    torch.utils.data.DataLoader(DummyDataset(is                    
                    _video=True),                                                  
                    batch_size=config.video_batch_size)                            
           DEBUG    + trainer =                                 pylint_plugin.py:81
                    SeaweedTrainer(model_path='./models/sd3.5_m                    
                    edium.safetensors', config=config,                             
                    image_dataloader=image_loader,                                 
                    video_dataloader=video_loader)                                 
           DEBUG    + trainer.train()                           pylint_plugin.py:81
           DEBUG    - @torch.no_grad()                          pylint_plugin.py:81
           DEBUG    - def main(prompt=PROMPT, model=MODEL,      pylint_plugin.py:81
                    out_dir=OUTDIR, postfix=None, seed=SEED,                       
                    seed_type=SEEDTYPE, sampler=None,                              
                    steps=None, cfg=None, shift=None,                              
                    width=WIDTH, height=HEIGHT,                                    
                    controlnet_ckpt=None,                                          
                    controlnet_cond_image=None, vae=VAEFile,                       
                    init_image=INIT_IMAGE, denoise=DENOISE,                        
                    skip_layer_cfg=False, verbose=False,                           
                    model_folder=MODEL_FOLDER,                                     
                    text_encoder_device='cpu', **kwargs):                          
           DEBUG    - assert not kwargs, f'Unknown arguments:   pylint_plugin.py:81
                    {kwargs}'                                                      
           DEBUG    - config =                                  pylint_plugin.py:81
                    CONFIGS.get(os.path.splitext(os.path.basena                    
                    me(model))[0], {})                                             
           DEBUG    - _shift = shift or config.get('shift', 3)  pylint_plugin.py:81
           DEBUG    - _steps = steps or config.get('steps', 50) pylint_plugin.py:81
           DEBUG    - _cfg = cfg or config.get('cfg', 5)        pylint_plugin.py:81
           DEBUG    - _sampler = sampler or                     pylint_plugin.py:81
                    config.get('sampler', 'dpmpp_2m')                              
           DEBUG    - if skip_layer_cfg:                        pylint_plugin.py:81
           DEBUG    - skip_layer_config =                       pylint_plugin.py:81
                    CONFIGS.get(os.path.splitext(os.path.basena                    
                    me(model))[0], {}).get('skip_layer_config',                    
                    {})                                                            
           DEBUG    - cfg = skip_layer_config.get('cfg', cfg)   pylint_plugin.py:81
           DEBUG    - else:                                     pylint_plugin.py:81
           DEBUG    - skip_layer_config = {}                    pylint_plugin.py:81
           DEBUG    - if controlnet_ckpt is not None:           pylint_plugin.py:81
           DEBUG    - controlnet_config =                       pylint_plugin.py:81
                    CONFIGS.get(os.path.splitext(os.path.basena                    
                    me(controlnet_ckpt))[0], {})                                   
           DEBUG    - _shift = shift or                         pylint_plugin.py:81
                    controlnet_config.get('shift', shift)                          
           DEBUG    - _steps = steps or                         pylint_plugin.py:81
                    controlnet_config.get('steps', steps)                          
           DEBUG    - _cfg = cfg or                             pylint_plugin.py:81
                    controlnet_config.get('cfg', cfg)                              
           DEBUG    - _sampler = sampler or                     pylint_plugin.py:81
                    controlnet_config.get('sampler', sampler)                      
           DEBUG    - inferencer = SD3Inferencer()              pylint_plugin.py:81
           DEBUG    - inferencer.load(model, vae, _shift,       pylint_plugin.py:81
                    controlnet_ckpt, model_folder,                                 
                    text_encoder_device, verbose)                                  
           DEBUG    - if isinstance(prompt, str):               pylint_plugin.py:81
           DEBUG    - if os.path.splitext(prompt)[-1] ==        pylint_plugin.py:81
                    '.txt':                                                        
           DEBUG    - with open(prompt, 'r') as f:              pylint_plugin.py:81
           DEBUG    - prompts =                                 pylint_plugin.py:81
           DEBUG    - else:                                     pylint_plugin.py:81
           DEBUG    - prompts =                                 pylint_plugin.py:81
           DEBUG    - sanitized_prompt = re.sub('[^\\w\\-\\.]', pylint_plugin.py:81
                    '_', prompt)                                                   
           DEBUG    - out_dir = os.path.join(out_dir,           pylint_plugin.py:81
                    os.path.splitext(os.path.basename(model))[0                    
                    ] + ('_' +                                                     
                    os.path.splitext(os.path.basename(controlne                    
                    t_ckpt))[0] if controlnet_ckpt is not None                     
                    else ''),                                                      
                    os.path.splitext(os.path.basename(sanitized                    
                    _prompt))[0][:50] + (postfix or                                
                    datetime.datetime.now().strftime('_%Y-%m-%d                    
                    T%H-%M-%S')))                                                  
           DEBUG    - os.makedirs(out_dir, exist_ok=False)      pylint_plugin.py:81
           DEBUG    - inferencer.gen_image(prompts, width,      pylint_plugin.py:81
                    height, _steps, _cfg, _sampler, seed,                          
                    seed_type, out_dir, controlnet_cond_image,                     
                    init_image, denoise, skip_layer_config)                        
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: __len__              pylint_plugin.py:61
           DEBUG    Skipping class method: __getitem__          pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    - modulate at line 66                      pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed at line 77       pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 107                                                       
           DEBUG    - get_1d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 116                                                       
           DEBUG    - split_qkv at line 210                    pylint_plugin.py:100
           DEBUG    - optimized_attention at line 215          pylint_plugin.py:100
           DEBUG    - block_mixing at line 591                 pylint_plugin.py:100
           DEBUG    - run_ablation_study at line 290           pylint_plugin.py:100
           DEBUG    - attention at line 17                     pylint_plugin.py:100
           DEBUG    - parse_parentheses at line 245            pylint_plugin.py:100
           DEBUG    - token_weights at line 274                pylint_plugin.py:100
           DEBUG    - escape_important at line 295             pylint_plugin.py:100
           DEBUG    - unescape_important at line 301           pylint_plugin.py:100
           DEBUG    - register at line 102                     pylint_plugin.py:100
           DEBUG    - append_dims at line 324                  pylint_plugin.py:100
           DEBUG    - to_d at line 330                         pylint_plugin.py:100
           DEBUG    - sample_euler at line 335                 pylint_plugin.py:100
           DEBUG    - sample_dpmpp_2m at line 351              pylint_plugin.py:100
           DEBUG    - Normalize at line 380                    pylint_plugin.py:100
           DEBUG    - load_into at line 36                     pylint_plugin.py:100
           DEBUG    - main at line 550                         pylint_plugin.py:100
           DEBUG    - initialize_models at line 400            pylint_plugin.py:100
           DEBUG    - train_apt at line 412                    pylint_plugin.py:100
           DEBUG    - load_sd35_weights at line 486            pylint_plugin.py:100
           DEBUG    - load_sd35_weights at line 541            pylint_plugin.py:100
           DEBUG    - main at line 794                         pylint_plugin.py:100
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: _load_annotations    pylint_plugin.py:61
           DEBUG    Skipping class method: _filter_data         pylint_plugin.py:61
           DEBUG    Skipping class method: _load_frames         pylint_plugin.py:61
           DEBUG    Skipping class method: _load_audio          pylint_plugin.py:61
           DEBUG    Skipping class method: _extract_keypoints   pylint_plugin.py:61
           DEBUG    Skipping class method: _generate_heatmap    pylint_plugin.py:61
           DEBUG    Skipping class method: _load_pose           pylint_plugin.py:61
           DEBUG    Skipping class method: __len__              pylint_plugin.py:61
           DEBUG    Skipping class method: __getitem__          pylint_plugin.py:61
           DEBUG    Skipping class method: __del__              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: setup_distributed    pylint_plugin.py:61
           DEBUG    Skipping class method: setup_optimizers     pylint_plugin.py:61
           DEBUG    Skipping class method: setup_logging        pylint_plugin.py:61
           DEBUG    Skipping class method: flow_matching_loss   pylint_plugin.py:61
           DEBUG    Skipping class method: add_noise            pylint_plugin.py:61
           DEBUG    Skipping class method: training_step        pylint_plugin.py:61
           DEBUG    Skipping class method: train_stage          pylint_plugin.py:61
           DEBUG    Skipping class method: save_checkpoint      pylint_plugin.py:61
           DEBUG    Skipping class method: train                pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    - modulate at line 66                      pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed at line 77       pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 107                                                       
           DEBUG    - get_1d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 116                                                       
           DEBUG    - split_qkv at line 210                    pylint_plugin.py:100
           DEBUG    - optimized_attention at line 215          pylint_plugin.py:100
           DEBUG    - block_mixing at line 591                 pylint_plugin.py:100
           DEBUG    - run_ablation_study at line 290           pylint_plugin.py:100
           DEBUG    - attention at line 17                     pylint_plugin.py:100
           DEBUG    - parse_parentheses at line 245            pylint_plugin.py:100
           DEBUG    - token_weights at line 274                pylint_plugin.py:100
           DEBUG    - escape_important at line 295             pylint_plugin.py:100
           DEBUG    - unescape_important at line 301           pylint_plugin.py:100
           DEBUG    - register at line 102                     pylint_plugin.py:100
           DEBUG    - append_dims at line 324                  pylint_plugin.py:100
           DEBUG    - to_d at line 330                         pylint_plugin.py:100
           DEBUG    - sample_euler at line 335                 pylint_plugin.py:100
           DEBUG    - sample_dpmpp_2m at line 351              pylint_plugin.py:100
           DEBUG    - Normalize at line 380                    pylint_plugin.py:100
           DEBUG    - load_into at line 36                     pylint_plugin.py:100
           DEBUG    - main at line 550                         pylint_plugin.py:100
           DEBUG    - initialize_models at line 400            pylint_plugin.py:100
           DEBUG    - train_apt at line 412                    pylint_plugin.py:100
           DEBUG    - load_sd35_weights at line 486            pylint_plugin.py:100
           DEBUG    - load_sd35_weights at line 541            pylint_plugin.py:100
           DEBUG    - main at line 794                         pylint_plugin.py:100
           DEBUG    Skipping class method: __post_init__        pylint_plugin.py:61
           DEBUG    Skipping class method: __new__              pylint_plugin.py:61
           DEBUG    Skipping class method: __init__             pylint_plugin.py:61
           DEBUG    Skipping class method: get_instance         pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    register_default_handlers                                      
           DEBUG    Skipping class method: register_handler     pylint_plugin.py:61
           DEBUG    Skipping class method: dispatch             pylint_plugin.py:61
           DEBUG    Skipping class method: _log_event           pylint_plugin.py:61
           DEBUG    Skipping class method: _track_failure       pylint_plugin.py:61
           DEBUG    Skipping class method: _update_counts       pylint_plugin.py:61
           DEBUG    Skipping class method: _save_failures       pylint_plugin.py:61
           DEBUG    Skipping class method: save_summary         pylint_plugin.py:61
           DEBUG    Skipping class method:                      pylint_plugin.py:61
                    get_problematic_videos                                         
           DEBUG    Skipping class method: get_event_stats      pylint_plugin.py:61
           DEBUG    Skipping class method: add_video            pylint_plugin.py:61
           DEBUG    Skipping class method: print_summary        pylint_plugin.py:61
           DEBUG    Skipping class method: reset                pylint_plugin.py:61
           DEBUG                                                pylint_plugin.py:64
                    Checking function: parse_log_file at line                      
                    187                                                            
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def                                                            
                    parse_log_file(log_path='./bad_videos/video                    
                    _events.log'):                                                 
                        """                                                        
                        Parse the video events log file to                         
                    extract failed video paths                                     
                        """                                                        
                        failed_videos = set()                                      
                        try:                                                       
                            with open(log_path, 'r') as f:                         
                                for line in f:                                     
                                    if not line.strip():                           
                                        continue                                   
                                    try:                                           
                                        parts =                                    
                    line.strip().split('\t')                                       
                                        if len(parts) >= 3:                        
                                            (timestamp,                            
                    error_type, filepath) = parts[:3]                              
                                            if error_type in                       
                    ['face_detection_failed',                                      
                    'landmark_detection_failed',                                   
                    'video_too_short']:                                            
                                                failed_videos.a                    
                    dd(filepath)                                                   
                                    except Exception as e:                         
                                        print(f'Warning: Could                     
                    not parse line: {line.strip()}')                               
                                        print(f'Error:                             
                    {str(e)}')                                                     
                                        continue                                   
                        except FileNotFoundError:                                  
                            print(f'Error: Log file not found                      
                    at {log_path}')                                                
                            return set()                                           
                        except Exception as e:                                     
                            print(f'Error reading log file:                        
                    {str(e)}')                                                     
                            return set()                                           
                        return failed_videos                                       
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def                                                            
                    parse_log_file(log_path='./bad_videos/video                    
                    _events.log'):                                                 
                    failed_videos = set()                                          
                    try:                                                           
                    with open(log_path, 'r') as f:                                 
                    for line in f:                                                 
                    if not line.strip():                                           
                    continue                                                       
                    try:                                                           
                    parts = line.strip().split('\t')                               
                    if len(parts) >= 3:                                            
                    (timestamp, error_type, filepath) =                            
                    parts[:3]                                                      
                    if error_type in ['face_detection_failed',                     
                    'landmark_detection_failed',                                   
                    'video_too_short']:                                            
                    failed_videos.add(filepath)                                    
                    except Exception as e:                                         
                    print(f'Warning: Could not parse line:                         
                    {line.strip()}')                                               
                    print(f'Error: {str(e)}')                                      
                    continue                                                       
                    except FileNotFoundError:                                      
                    print(f'Error: Log file not found at                           
                    {log_path}')                                                   
                    return set()                                                   
                    except Exception as e:                                         
                    print(f'Error reading log file: {str(e)}')                     
                    return set()                                                   
                    return failed_videos                                           
           DEBUG                                                pylint_plugin.py:64
                    Checking function: remove_failed_videos at                     
                    line 224                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def                                                            
                    remove_failed_videos(log_path='./bad_videos                    
                    /video_events.log'):                                           
                        """                                                        
                        Remove videos that failed processing                       
                    based on the event log                                         
                        """                                                        
                        failed_videos =                                            
                    parse_log_file(log_path)                                       
                        if not failed_videos:                                      
                            print('No failed videos found in                       
                    the log file.')                                                
                            return                                                 
                        removed_count = 0                                          
                        failed_count = 0                                           
                        skipped_count = 0                                          
                        print(f'\nAttempting to remove                             
                    {len(failed_videos)} unique failed                             
                    videos...')                                                    
                        for filepath in failed_videos:                             
                            try:                                                   
                                if os.path.exists(filepath):                       
                                    os.remove(filepath)                            
                                    print(f'Removed:                               
                    {filepath}')                                                   
                                    removed_count += 1                             
                                else:                                              
                                    print(f'Skipped (not                           
                    found): {filepath}')                                           
                                    skipped_count += 1                             
                            except Exception as e:                                 
                                print(f'Error removing                             
                    {filepath}: {str(e)}')                                         
                                failed_count += 1                                  
                        print(f'\nSummary:')                                       
                        print(f'Successfully removed:                              
                    {removed_count} files')                                        
                        print(f'Failed to remove:                                  
                    {failed_count} files')                                         
                        print(f'Skipped (not found):                               
                    {skipped_count} files')                                        
                        print(f'Total unique failed videos in                      
                    log: {len(failed_videos)}')                                    
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def                                                            
                    remove_failed_videos(log_path='./bad_videos                    
                    /video_events.log'):                                           
                    failed_videos = parse_log_file(log_path)                       
                    if not failed_videos:                                          
                    print('No failed videos found in the log                       
                    file.')                                                        
                    return                                                         
                    removed_count = 0                                              
                    failed_count = 0                                               
                    skipped_count = 0                                              
                    print(f'\nAttempting to remove                                 
                    {len(failed_videos)} unique failed                             
                    videos...')                                                    
                    for filepath in failed_videos:                                 
                    try:                                                           
                    if os.path.exists(filepath):                                   
                    os.remove(filepath)                                            
                    print(f'Removed: {filepath}')                                  
                    removed_count += 1                                             
                    else:                                                          
                    print(f'Skipped (not found): {filepath}')                      
                    skipped_count += 1                                             
                    except Exception as e:                                         
                    print(f'Error removing {filepath}:                             
                    {str(e)}')                                                     
                    failed_count += 1                                              
                    print(f'\nSummary:')                                           
                    print(f'Successfully removed:                                  
                    {removed_count} files')                                        
                    print(f'Failed to remove: {failed_count}                       
                    files')                                                        
                    print(f'Skipped (not found):                                   
                    {skipped_count} files')                                        
                    print(f'Total unique failed videos in log:                     
                    {len(failed_videos)}')                                         
           DEBUG                                                pylint_plugin.py:64
                    Checking function: clean_window_cache at                       
                    line 268                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def clean_window_cache(cache_dir: str =                        
                    'cache', pattern: str = 'window_*.h5'):                        
                        """                                                        
                        Delete all window cache H5 files.                          
                                                                                   
                        Args:                                                      
                            cache_dir: Directory containing                        
                    cache files                                                    
                            pattern: File pattern to match                         
                    cache files                                                    
                        """                                                        
                        try:                                                       
                            cache_path = Path(cache_dir)                           
                            if not cache_path.exists():                            
                                logger.warning(f'Cache                             
                    directory {cache_dir} does not exist')                         
                                return                                             
                            cache_files =                                          
                    list(cache_path.glob(pattern))                                 
                            if not cache_files:                                    
                                logger.info(f'No cache files                       
                    found matching pattern {pattern}')                             
                                return                                             
                            logger.info(f'Found                                    
                    {len(cache_files)} cache files to delete')                     
                            for cache_file in cache_files:                         
                                try:                                               
                                    try:                                           
                                        with                                       
                    h5py.File(cache_file, 'r') as f:                               
                                            pass                                   
                                    except Exception:                              
                                        pass                                       
                                    cache_file.unlink()                            
                                    logger.info(f'Deleted cache                    
                    file: {cache_file}')                                           
                                except Exception as e:                             
                                    logger.error(f'Error                           
                    deleting {cache_file}: {str(e)}')                              
                            logger.info('Cache cleaning                            
                    complete')                                                     
                        except Exception as e:                                     
                            logger.error(f'Error cleaning                          
                    cache: {str(e)}')                                              
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def clean_window_cache(cache_dir: str =                        
                    'cache', pattern: str = 'window_*.h5'):                        
                    try:                                                           
                    cache_path = Path(cache_dir)                                   
                    if not cache_path.exists():                                    
                                                                                   
                    return                                                         
                    cache_files =                                                  
                    list(cache_path.glob(pattern))                                 
                    if not cache_files:                                            
                                                                                   
                    return                                                         
                    } cache files to delete')                                      
                    for cache_file in cache_files:                                 
                    try:                                                           
                    try:                                                           
                    with h5py.File(cache_file, 'r') as f:                          
                    pass                                                           
                    except Exception:                                              
                    pass                                                           
                    cache_file.unlink()                                            
                                                                                   
                    except Exception as e:                                         
                    }')                                                            
                                                                                   
                    except Exception as e:                                         
                    }')                                                            
           DEBUG                                                pylint_plugin.py:64
                    Checking function: clean_specific_window at                    
                    line 315                                                       
           DEBUG    Original body:                              pylint_plugin.py:68
                                                                                   
                    def clean_specific_window(window_idx: int,                     
                    cache_dir: str = 'cache'):                                     
                        """                                                        
                        Delete a specific window cache file.                       
                                                                                   
                        Args:                                                      
                            window_idx: Index of window to                         
                    delete                                                         
                            cache_dir: Directory containing                        
                    cache files                                                    
                        """                                                        
                        try:                                                       
                            cache_path = Path(cache_dir)                           
                            target_file = cache_path /                             
                    f'window_{window_idx}.h5'                                      
                            if not target_file.exists():                           
                                logger.warning(f'Cache file for                    
                    window {window_idx} does not exist')                           
                                return                                             
                            try:                                                   
                                with h5py.File(target_file,                        
                    'r') as f:                                                     
                                    pass                                           
                            except Exception:                                      
                                pass                                               
                            target_file.unlink()                                   
                            logger.info(f'Deleted cache file                       
                    for window {window_idx}')                                      
                        except Exception as e:                                     
                            logger.error(f'Error deleting                          
                    window {window_idx}: {str(e)}')                                
           DEBUG    Normalized body:                            pylint_plugin.py:69
                    def clean_specific_window(window_idx: int,                     
                    cache_dir: str = 'cache'):                                     
                    try:                                                           
                    cache_path = Path(cache_dir)                                   
                    target_file = cache_path /                                     
                    f'window_{window_idx}.h5'                                      
                    if not target_file.exists():                                   
                                                                                   
                    return                                                         
                    try:                                                           
                    with h5py.File(target_file, 'r') as f:                         
                    pass                                                           
                    except Exception:                                              
                    pass                                                           
                    target_file.unlink()                                           
                                                                                   
                    except Exception as e:                                         
                    }')                                                            
           DEBUG                                                pylint_plugin.py:98
                    Function summary:                                              
           DEBUG    - setup_video_training at line 346         pylint_plugin.py:100
           DEBUG    - modulate at line 66                      pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed at line 77       pylint_plugin.py:100
           DEBUG    - get_2d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 107                                                       
           DEBUG    - get_1d_sincos_pos_embed_from_grid at     pylint_plugin.py:100
                    line 116                                                       
           DEBUG    - split_qkv at line 210                    pylint_plugin.py:100
           DEBUG    - optimized_attention at line 215          pylint_plugin.py:100
           DEBUG    - block_mixing at line 591                 pylint_plugin.py:100
           DEBUG    - run_ablation_study at line 290           pylint_plugin.py:100
           DEBUG    - attention at line 17                     pylint_plugin.py:100
           DEBUG    - parse_parentheses at line 245            pylint_plugin.py:100
           DEBUG    - token_weights at line 274                pylint_plugin.py:100
           DEBUG    - escape_important at line 295             pylint_plugin.py:100
           DEBUG    - unescape_important at line 301           pylint_plugin.py:100
           DEBUG    - register at line 102                     pylint_plugin.py:100
           DEBUG    - append_dims at line 324                  pylint_plugin.py:100
           DEBUG    - to_d at line 330                         pylint_plugin.py:100
           DEBUG    - sample_euler at line 335                 pylint_plugin.py:100
           DEBUG    - sample_dpmpp_2m at line 351              pylint_plugin.py:100
           DEBUG    - Normalize at line 380                    pylint_plugin.py:100
           DEBUG    - load_into at line 36                     pylint_plugin.py:100
           DEBUG    - main at line 550                         pylint_plugin.py:100
           DEBUG    - initialize_models at line 400            pylint_plugin.py:100
           DEBUG    - train_apt at line 412                    pylint_plugin.py:100
           DEBUG    - load_sd35_weights at line 486            pylint_plugin.py:100
           DEBUG    - load_sd35_weights at line 541            pylint_plugin.py:100
           DEBUG    - main at line 794                         pylint_plugin.py:100
           DEBUG    - parse_log_file at line 187               pylint_plugin.py:100
           DEBUG    - remove_failed_videos at line 224         pylint_plugin.py:100
           DEBUG    - clean_window_cache at line 268           pylint_plugin.py:100
           DEBUG    - clean_specific_window at line 315        pylint_plugin.py:100
